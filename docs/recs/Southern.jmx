<?xml version="1.0" encoding="UTF-8"?>
<jmeterTestPlan version="1.2" properties="3.2" jmeter="3.2 r1790748">
  <hashTree>
    <TestPlan guiclass="TestPlanGui" testclass="TestPlan" testname="AirShoppingWithRandomValues" enabled="true">
      <stringProp name="TestPlan.comments"></stringProp>
      <boolProp name="TestPlan.functional_mode">false</boolProp>
      <boolProp name="TestPlan.serialize_threadgroups">false</boolProp>
      <elementProp name="TestPlan.user_defined_variables" elementType="Arguments" guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
        <collectionProp name="Arguments.arguments"/>
      </elementProp>
      <stringProp name="TestPlan.user_define_classpath"></stringProp>
    </TestPlan>
    <hashTree>
      <Arguments guiclass="ArgumentsPanel" testclass="Arguments" testname="Parameters" enabled="true">
        <collectionProp name="Arguments.arguments">
          <elementProp name="IP" elementType="Argument">
            <stringProp name="Argument.name">IP</stringProp>
            <stringProp name="Argument.value">35.196.106.95</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
            <stringProp name="Argument.desc">127.0.0.1</stringProp>
          </elementProp>
          <elementProp name="Threads" elementType="Argument">
            <stringProp name="Argument.name">Threads</stringProp>
            <stringProp name="Argument.value">1</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="Threads_low" elementType="Argument">
            <stringProp name="Argument.name">Threads_low</stringProp>
            <stringProp name="Argument.value">1</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="Loop" elementType="Argument">
            <stringProp name="Argument.name">Loop</stringProp>
            <stringProp name="Argument.value">1</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="port" elementType="Argument">
            <stringProp name="Argument.name">port</stringProp>
            <stringProp name="Argument.value">80</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
            <stringProp name="Argument.desc">8085</stringProp>
          </elementProp>
          <elementProp name="delayForThreads" elementType="Argument">
            <stringProp name="Argument.name">delayForThreads</stringProp>
            <stringProp name="Argument.value">2</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="SubPath" elementType="Argument">
            <stringProp name="Argument.name">SubPath</stringProp>
            <stringProp name="Argument.value">/entry/ndcgateway</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
            <stringProp name="Argument.desc">/ndcgateway</stringProp>
          </elementProp>
        </collectionProp>
      </Arguments>
      <hashTree/>
      <CounterConfig guiclass="CounterConfigGui" testclass="CounterConfig" testname="Counter" enabled="true">
        <stringProp name="CounterConfig.start">1</stringProp>
        <stringProp name="CounterConfig.end">100000</stringProp>
        <stringProp name="CounterConfig.incr">1</stringProp>
        <stringProp name="CounterConfig.name">cntr</stringProp>
        <stringProp name="CounterConfig.format"></stringProp>
        <boolProp name="CounterConfig.per_user">false</boolProp>
        <stringProp name="TestPlan.comments">used for echotoken to detect messages</stringProp>
      </CounterConfig>
      <hashTree/>
      <RandomVariableConfig guiclass="TestBeanGUI" testclass="RandomVariableConfig" testname="bookingVariable" enabled="true">
        <stringProp name="variableName">bookingVariable</stringProp>
        <stringProp name="outputFormat"></stringProp>
        <stringProp name="minimumValue">1</stringProp>
        <stringProp name="maximumValue">66</stringProp>
        <stringProp name="randomSeed"></stringProp>
        <boolProp name="perThread">true</boolProp>
      </RandomVariableConfig>
      <hashTree/>
      <BeanShellPreProcessor guiclass="TestBeanGUI" testclass="BeanShellPreProcessor" testname="RandomDate generator" enabled="true">
        <stringProp name="filename"></stringProp>
        <stringProp name="parameters"></stringProp>
        <boolProp name="resetInterpreter">true</boolProp>
        <stringProp name="script">import java.text.SimpleDateFormat;
import java.util.Calendar;

calendar = Calendar.getInstance();
calendar.set(2017, 9, 25);
startTime = calendar.getTimeInMillis();
calendar.set(2017, 12, 23);
endTime = calendar.getTimeInMillis();
randomTime1 = startTime + (long)(Math.random()*(endTime-startTime));
randomTime2 = randomTime1 + (long)(Math.random()*(endTime - randomTime1)+86400000);
randomTime3 = randomTime2 + (long)(Math.random()*(endTime - randomTime1)+86400000);

formatter = new SimpleDateFormat(&quot;yyyy-MM-dd&quot;);
calendar.setTimeInMillis(randomTime1);
vars.put(&quot;start&quot;, formatter.format(calendar.getTime()));
calendar.setTimeInMillis(randomTime2);
vars.put(&quot;end&quot;, formatter.format(calendar.getTime()));

calendar.setTimeInMillis(randomTime3);
vars.put(&quot;end2&quot;, formatter.format(calendar.getTime()));</stringProp>
      </BeanShellPreProcessor>
      <hashTree/>
      <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="FLOW ONE WAY MULTI PAX" enabled="true">
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
          <boolProp name="LoopController.continue_forever">false</boolProp>
          <stringProp name="LoopController.loops">${Loop}</stringProp>
        </elementProp>
        <stringProp name="ThreadGroup.num_threads">${Threads}</stringProp>
        <stringProp name="ThreadGroup.ramp_time">1</stringProp>
        <longProp name="ThreadGroup.start_time">1506082089000</longProp>
        <longProp name="ThreadGroup.end_time">1506082089000</longProp>
        <boolProp name="ThreadGroup.scheduler">false</boolProp>
        <stringProp name="ThreadGroup.duration"></stringProp>
        <stringProp name="ThreadGroup.delay">${delayForThreads}</stringProp>
      </ThreadGroup>
      <hashTree>
        <Arguments guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
          <collectionProp name="Arguments.arguments">
            <elementProp name="onds" elementType="Argument">
              <stringProp name="Argument.name">onds</stringProp>
              <stringProp name="Argument.value">MSP,ORD</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
              <stringProp name="Argument.desc">,MPN,ASI</stringProp>
            </elementProp>
            <elementProp name="year" elementType="Argument">
              <stringProp name="Argument.name">year</stringProp>
              <stringProp name="Argument.value">2017</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
          </collectionProp>
        </Arguments>
        <hashTree/>
        <RandomVariableConfig guiclass="TestBeanGUI" testclass="RandomVariableConfig" testname="adt_number" enabled="true">
          <stringProp name="maximumValue">1</stringProp>
          <stringProp name="minimumValue">1</stringProp>
          <stringProp name="outputFormat"></stringProp>
          <boolProp name="perThread">true</boolProp>
          <stringProp name="randomSeed"></stringProp>
          <stringProp name="variableName">adt_number</stringProp>
        </RandomVariableConfig>
        <hashTree/>
        <RandomVariableConfig guiclass="TestBeanGUI" testclass="RandomVariableConfig" testname="chd_number" enabled="true">
          <stringProp name="maximumValue">1</stringProp>
          <stringProp name="minimumValue">0</stringProp>
          <stringProp name="outputFormat"></stringProp>
          <boolProp name="perThread">true</boolProp>
          <stringProp name="randomSeed"></stringProp>
          <stringProp name="variableName">chd_number</stringProp>
        </RandomVariableConfig>
        <hashTree/>
        <BeanShellPreProcessor guiclass="TestBeanGUI" testclass="BeanShellPreProcessor" testname="destination generator" enabled="true">
          <stringProp name="filename"></stringProp>
          <stringProp name="parameters"></stringProp>
          <boolProp name="resetInterpreter">false</boolProp>
          <stringProp name="script">import java.util.Random;
import java.text.SimpleDateFormat;
import java.util.Calendar;


String[] categories = (vars.get(&quot;onds&quot;)).split(&quot;,&quot;);
int idx = new Random().nextInt(categories.length/2);
String origin = categories[idx*2];
vars.put(&quot;origin&quot;, origin);

int idx2 = idx * 2 + 1;
String destination = categories[idx2];
vars.put(&quot;destination&quot;, destination);

String ondString=&quot;&quot;;
String varNumOfOnds =&quot;&quot;;
/*



int numOnd = new Random().nextInt(2);
varNumOfOnds = &quot;&quot;+(numOnd+1);


calendar = Calendar.getInstance();
calendar.set(2017, 12, 23);
endTime = calendar.getTimeInMillis();
formatter = new SimpleDateFormat(&quot;yyyy-MM-dd&quot;);
calendar.setTimeInMillis(endTime);



if(numOnd&gt;0){
	ondString=&quot;\t\t\t&lt;OriginDestination&gt;\n&lt;Departure&gt;\n&lt;AirportCode&gt;&quot; + destination +&quot;&lt;/AirportCode&gt;\n&lt;Date&gt;&quot;+ formatter.format(calendar.getTime()) +&quot;&lt;/Date&gt;\n&lt;/Departure&gt;\n&lt;Arrival&gt;\n&lt;AirportCode&gt;&quot;+origin +&quot;&lt;/AirportCode&gt;\n&lt;Date&gt;&quot;+formatter.format(calendar.getTime()) +&quot;&lt;/Date&gt;\n&lt;/Arrival&gt;\n&lt;MarketingCarrierAirline&gt;\n&lt;AirlineID&gt;NW&lt;/AirlineID&gt;\n&lt;Name&gt;UNISYS&lt;/Name&gt;\n&lt;/MarketingCarrierAirline&gt;\n&lt;/OriginDestination&gt;&quot;;
}

*/
vars.put(&quot;numberOfONDs&quot;, varNumOfOnds);
vars.put(&quot;ondString&quot;, ondString);


/*
String[] categories = (vars.get(&quot;onds&quot;)).split(&quot;,&quot;);
int idx = new Random().nextInt(categories.length);
vars.put(&quot;origin&quot;, (categories[idx]));

int idx2 = new Random().nextInt(categories.length);
while(idx2==idx){
	idx2 = new Random().nextInt(categories.length);
}
vars.put(&quot;destination&quot;, (categories[idx2]));

*/






/*
int idx3 = new Random().nextInt(categories.length);
while(idx3==idx || idx3==idx2){
	idx3 = new Random().nextInt(categories.length);
}
vars.put(&quot;destination2&quot;, (categories[idx3]));

int idx4 = new Random().nextInt(categories.length);
while(idx4==idx || idx4==idx2 || idx4==idx3){
	idx4 = new Random().nextInt(categories.length);
}
vars.put(&quot;destination3&quot;, (categories[idx4]));
*/
</stringProp>
          <stringProp name="TestPlan.comments">//gets information from user defined values
//put a new variabel to the user defined variables</stringProp>
        </BeanShellPreProcessor>
        <hashTree/>
        <BeanShellPreProcessor guiclass="TestBeanGUI" testclass="BeanShellPreProcessor" testname="destination generator" enabled="false">
          <stringProp name="filename"></stringProp>
          <stringProp name="parameters"></stringProp>
          <boolProp name="resetInterpreter">false</boolProp>
          <stringProp name="script">import java.util.Random;


String[] categories = (vars.get(&quot;onds&quot;)).split(&quot;,&quot;);
int idx = new Random().nextInt(categories.length/2);
vars.put(&quot;origin&quot;, (categories[idx*2]));

vars.put(&quot;destination&quot;, (categories[idx*2+1]));

int numOfAdt = new Random().nextInt(3)+1;
int numOfChd = new Random().nextInt(3)+1;


/*
int idx2 = new Random().nextInt(categories.length);
while(idx2==idx){
	idx2 = new Random().nextInt(categories.length);
}
vars.put(&quot;destination&quot;, (categories[idx2]));
*/

/*
int idx3 = new Random().nextInt(categories.length);
while(idx3==idx || idx3==idx2){
	idx3 = new Random().nextInt(categories.length);
}
vars.put(&quot;destination2&quot;, (categories[idx3]));

int idx4 = new Random().nextInt(categories.length);
while(idx4==idx || idx4==idx2 || idx4==idx3){
	idx4 = new Random().nextInt(categories.length);
}
vars.put(&quot;destination3&quot;, (categories[idx4]));
*/
</stringProp>
          <stringProp name="TestPlan.comments">//gets information from user defined values
//put a new variabel to the user defined variables</stringProp>
        </BeanShellPreProcessor>
        <hashTree/>
        <BeanShellPreProcessor guiclass="TestBeanGUI" testclass="BeanShellPreProcessor" testname="RandomDate generator" enabled="false">
          <stringProp name="filename"></stringProp>
          <stringProp name="parameters"></stringProp>
          <boolProp name="resetInterpreter">true</boolProp>
          <stringProp name="script">import java.text.SimpleDateFormat;
import java.util.Calendar;

calendar = Calendar.getInstance();
calendar.set(2016, 9, 1);
startTime = calendar.getTimeInMillis();
calendar.set(2017, 01, 31);
endTime = calendar.getTimeInMillis();
randomTime1 = startTime + (long)(Math.random()*(endTime-startTime));
randomTime2 = randomTime1 + (long)(Math.random()*(endTime - randomTime1)+86400000);
randomTime3 = randomTime2 + (long)(Math.random()*(endTime - randomTime1)+86400000);

formatter = new SimpleDateFormat(&quot;yyyy-MM-dd&quot;);
calendar.setTimeInMillis(randomTime1);
vars.put(&quot;start&quot;, formatter.format(calendar.getTime()));
calendar.setTimeInMillis(randomTime2);
vars.put(&quot;end&quot;, formatter.format(calendar.getTime()));

calendar.setTimeInMillis(randomTime3);
vars.put(&quot;end2&quot;, formatter.format(calendar.getTime()));</stringProp>
        </BeanShellPreProcessor>
        <hashTree/>
        <IfController guiclass="IfControllerPanel" testclass="IfController" testname="If has Children" enabled="true">
          <stringProp name="IfController.condition">${chd_number}&gt;0</stringProp>
          <boolProp name="IfController.evaluateAll">false</boolProp>
        </IfController>
        <hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="AirShoppingRQ One Way With CHD" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;&#xd;
&lt;AirShoppingRQ EchoToken=&quot;${cntr}-${origin}-${destination}-${adt_number}ADT-${chd_number}CHD-${numberOfONDs}OND&quot; TimeStamp=&quot;2016-03-31T00:00:00.000+03:00&quot; Version=&quot;IATA2016.2&quot;&#xd;
               TransactionIdentifier=&quot;TRN12345&quot; Target=&quot;Test&quot; xmlns=&quot;http://www.iata.org/IATA/EDIST&quot;&gt;&#xd;
		&lt;PointOfSale id=&quot;U028m-RR4sT-636Y2-f5GqP&quot; AgentDutyCode=&quot;11&quot;&gt;&#xd;
		&lt;Location&gt;&#xd;
			&lt;CountryCode&gt;US&lt;/CountryCode&gt;&#xd;
			&lt;CityCode&gt;MEM&lt;/CityCode&gt;&#xd;
		&lt;/Location&gt;&#xd;
		&lt;TouchPoint&gt;&#xd;
			&lt;Device&gt;&#xd;
				&lt;Code&gt;2&lt;/Code&gt;&#xd;
				&lt;Definition&gt;Web Browser&lt;/Definition&gt;&#xd;
				&lt;Position&gt;&#xd;
					&lt;Latitude&gt;38.89756&lt;/Latitude&gt;&#xd;
					&lt;Longitude&gt;-77.03650&lt;/Longitude&gt;&#xd;
					&lt;NAC&gt;8KD7V PGGM0&lt;/NAC&gt;&#xd;
				&lt;/Position&gt;&#xd;
			&lt;/Device&gt;&#xd;
		&lt;/TouchPoint&gt;&#xd;
	&lt;/PointOfSale&gt;&#xd;
	&lt;Document&gt;&#xd;
		&lt;Name&gt;NDC-Gateway&lt;/Name&gt;&#xd;
		&lt;ReferenceVersion&gt;1.0&lt;/ReferenceVersion&gt;&#xd;
	&lt;/Document&gt;&#xd;
	&lt;Party&gt;&#xd;
		&lt;Sender&gt;&#xd;
			&lt;TravelAgencySender&gt;&#xd;
				&lt;Name&gt;1012&lt;/Name&gt;&#xd;
				&lt;Type&gt;TravelAgency&lt;/Type&gt;&#xd;
				&lt;PseudoCity&gt;MEM001&lt;/PseudoCity&gt;&#xd;
				&lt;IATA_Number&gt;35200421&lt;/IATA_Number&gt;&#xd;
				&lt;AgencyID&gt;209/209M&lt;/AgencyID&gt;&#xd;
				&lt;AgentUser&gt;&#xd;
					&lt;AgentUserID&gt;593339377051100&lt;/AgentUserID&gt;&#xd;
				&lt;/AgentUser&gt;&#xd;
			&lt;/TravelAgencySender&gt;&#xd;
		&lt;/Sender&gt;&#xd;
		&#xd;
		&lt;Participants&gt;&#xd;
			&lt;Participant&gt;&#xd;
				&lt;EnabledSystemParticipant SequenceNumber=&quot;1&quot;&gt;&#xd;
					&lt;SystemID&gt;593339377051100&lt;/SystemID&gt;&#xd;
				&lt;/EnabledSystemParticipant&gt;&#xd;
				&lt;CorporateParticipant&gt;&#xd;
					&lt;!-- &lt;Name&gt;DISCOUNT 90&lt;/Name&gt; --&gt;&#xd;
					&lt;ID&gt;345&lt;/ID&gt;&#xd;
					&lt;CorporateCode&gt;man8432&lt;/CorporateCode&gt;&#xd;
				&lt;/CorporateParticipant&gt;&#xd;
			&lt;/Participant&gt;&#xd;
		&lt;/Participants&gt;&#xd;
		&lt;Recipient&gt;&#xd;
			&lt;MarketingCarrierRecipient&gt;&#xd;
				&lt;AirlineID&gt;9X&lt;/AirlineID&gt;&#xd;
			&lt;/MarketingCarrierRecipient&gt;&#xd;
		&lt;/Recipient&gt;&#xd;
	&lt;/Party&gt;&#xd;
	&lt;Travelers&gt;&#xd;
		&lt;Traveler&gt;&#xd;
			&lt;AnonymousTraveler&gt;&#xd;
				&lt;PTC Quantity=&quot;${adt_number}&quot;&gt;ADT&lt;/PTC&gt;&#xd;
			&lt;/AnonymousTraveler&gt;&#xd;
			&lt;AnonymousTraveler&gt;&#xd;
				&lt;PTC Quantity=&quot;${chd_number}&quot;&gt;CHD&lt;/PTC&gt;&#xd;
			&lt;/AnonymousTraveler&gt;&#xd;
		&lt;/Traveler&gt;&#xd;
	&lt;/Travelers&gt;&#xd;
	&lt;CoreQuery&gt;&#xd;
		&lt;OriginDestinations&gt;&#xd;
			&lt;OriginDestination&gt;&#xd;
				&lt;Departure&gt;&#xd;
					&lt;AirportCode&gt;${origin}&lt;/AirportCode&gt;&#xd;
					&lt;Date&gt;${start}&lt;/Date&gt;&#xd;
				&lt;/Departure&gt;&#xd;
				&lt;Arrival&gt;&#xd;
					&lt;AirportCode&gt;${destination}&lt;/AirportCode&gt;&#xd;
				&lt;/Arrival&gt;&#xd;
				&lt;MarketingCarrierAirline&gt;&#xd;
					&lt;AirlineID&gt;9X&lt;/AirlineID&gt;&#xd;
					&lt;Name&gt;Southern Airlines&lt;/Name&gt;&#xd;
				&lt;/MarketingCarrierAirline&gt;&#xd;
			&lt;/OriginDestination&gt;&#xd;
			${ondString}&#xd;
		&lt;/OriginDestinations&gt;&#xd;
	&lt;/CoreQuery&gt;&#xd;
		&lt;Preference&gt;&#xd;
		&lt;CabinPreferences&gt;&#xd;
			&lt;CabinType&gt;&#xd;
				&lt;Code&gt;Economy&lt;/Code&gt;&#xd;
			&lt;/CabinType&gt;&#xd;
		&lt;/CabinPreferences&gt;&#xd;
	&lt;/Preference&gt;&#xd;
	&lt;Metadata&gt;&#xd;
		&lt;Other&gt;&#xd;
			&lt;OtherMetadata&gt;&#xd;
				&lt;CurrencyMetadatas&gt;&#xd;
					&lt;CurrencyMetadata MetadataKey=&quot;USD&quot;&gt;&#xd;
						&lt;Decimals&gt;2&lt;/Decimals&gt;&#xd;
					&lt;/CurrencyMetadata&gt;&#xd;
				&lt;/CurrencyMetadatas&gt;&#xd;
			&lt;/OtherMetadata&gt;&#xd;
			&lt;OtherMetadata&gt;&#xd;
				&lt;LanguageMetadatas&gt;&#xd;
					&lt;LanguageMetadata MetadataKey=&quot;Display&quot;&gt;&#xd;
						&lt;Application&gt;Display&lt;/Application&gt;&#xd;
						&lt;Code_ISO&gt;en&lt;/Code_ISO&gt;&#xd;
					&lt;/LanguageMetadata&gt;&#xd;
				&lt;/LanguageMetadatas&gt;&#xd;
			&lt;/OtherMetadata&gt;&#xd;
		&lt;/Other&gt;&#xd;
	&lt;/Metadata&gt;&#xd;
&lt;/AirShoppingRQ&gt;</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${IP}</stringProp>
            <stringProp name="HTTPSampler.port">${port}</stringProp>
            <stringProp name="HTTPSampler.protocol"></stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">${SubPath}</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">Content-Type</stringProp>
                  <stringProp name="Header.value">application/xml</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
            <XPathExtractor guiclass="XPathExtractorGui" testclass="XPathExtractor" testname="getResponseID" enabled="true">
              <stringProp name="XPathExtractor.default">null</stringProp>
              <stringProp name="XPathExtractor.refname">getResponseID</stringProp>
              <stringProp name="XPathExtractor.matchNumber">-1</stringProp>
              <stringProp name="XPathExtractor.xpathQuery">/AirShoppingRS/ShoppingResponseID/ResponseID</stringProp>
              <boolProp name="XPathExtractor.validate">false</boolProp>
              <boolProp name="XPathExtractor.tolerant">false</boolProp>
              <boolProp name="XPathExtractor.namespace">false</boolProp>
            </XPathExtractor>
            <hashTree/>
            <XPathExtractor guiclass="XPathExtractorGui" testclass="XPathExtractor" testname="getFlightNumber" enabled="true">
              <stringProp name="XPathExtractor.default">null</stringProp>
              <stringProp name="XPathExtractor.refname">getFlightNumber</stringProp>
              <stringProp name="XPathExtractor.matchNumber">-1</stringProp>
              <stringProp name="XPathExtractor.xpathQuery">/AirShoppingRS/DataLists/FlightSegmentList/FlightSegment[1]/OperatingCarrier/FlightNumber</stringProp>
              <boolProp name="XPathExtractor.validate">false</boolProp>
              <boolProp name="XPathExtractor.tolerant">false</boolProp>
              <boolProp name="XPathExtractor.namespace">false</boolProp>
            </XPathExtractor>
            <hashTree/>
            <XPathExtractor guiclass="XPathExtractorGui" testclass="XPathExtractor" testname="getAircraftCode" enabled="true">
              <stringProp name="XPathExtractor.default">null</stringProp>
              <stringProp name="XPathExtractor.refname">getAircraftCode</stringProp>
              <stringProp name="XPathExtractor.matchNumber">-1</stringProp>
              <stringProp name="XPathExtractor.xpathQuery">/AirShoppingRS/DataLists/FlightSegmentList/FlightSegment[1]/Equipment/AircraftCode</stringProp>
              <boolProp name="XPathExtractor.validate">false</boolProp>
              <boolProp name="XPathExtractor.tolerant">false</boolProp>
              <boolProp name="XPathExtractor.namespace">false</boolProp>
            </XPathExtractor>
            <hashTree/>
            <XPathExtractor guiclass="XPathExtractorGui" testclass="XPathExtractor" testname="getClassOfService" enabled="true">
              <stringProp name="XPathExtractor.default">null</stringProp>
              <stringProp name="XPathExtractor.refname">getClassOfService</stringProp>
              <stringProp name="XPathExtractor.matchNumber">-1</stringProp>
              <stringProp name="XPathExtractor.xpathQuery">/AirShoppingRS/DataLists/FlightSegmentList/FlightSegment[1]/ClassOfService/Code</stringProp>
              <boolProp name="XPathExtractor.validate">false</boolProp>
              <boolProp name="XPathExtractor.tolerant">false</boolProp>
              <boolProp name="XPathExtractor.namespace">false</boolProp>
            </XPathExtractor>
            <hashTree/>
            <XPathExtractor guiclass="XPathExtractorGui" testclass="XPathExtractor" testname="getPriceGuaranteeTimeLimit" enabled="true">
              <stringProp name="XPathExtractor.default">null</stringProp>
              <stringProp name="XPathExtractor.refname">getPriceGuaranteeTimeLimit</stringProp>
              <stringProp name="XPathExtractor.matchNumber">-1</stringProp>
              <stringProp name="XPathExtractor.xpathQuery">/AirShoppingRS/OffersGroup/AirlineOffers/AirlineOffer/TimeLimits/OtherLimits/OtherLimit/PriceGuaranteeTimeLimit/@Timestamp</stringProp>
              <boolProp name="XPathExtractor.validate">false</boolProp>
              <boolProp name="XPathExtractor.tolerant">false</boolProp>
              <boolProp name="XPathExtractor.namespace">false</boolProp>
            </XPathExtractor>
            <hashTree/>
            <XPathExtractor guiclass="XPathExtractorGui" testclass="XPathExtractor" testname="getTicketBy" enabled="true">
              <stringProp name="XPathExtractor.default">null</stringProp>
              <stringProp name="XPathExtractor.refname">getTicketBy</stringProp>
              <stringProp name="XPathExtractor.matchNumber">-1</stringProp>
              <stringProp name="XPathExtractor.xpathQuery">/AirShoppingRS/OffersGroup/AirlineOffers/AirlineOffer/TimeLimits/OtherLimits/OtherLimit/TicketByTimeLimit/TicketBy</stringProp>
              <boolProp name="XPathExtractor.validate">false</boolProp>
              <boolProp name="XPathExtractor.tolerant">false</boolProp>
              <boolProp name="XPathExtractor.namespace">false</boolProp>
            </XPathExtractor>
            <hashTree/>
            <XPathExtractor guiclass="XPathExtractorGui" testclass="XPathExtractor" testname="getDepartureDateSEG1" enabled="true">
              <stringProp name="XPathExtractor.default">null</stringProp>
              <stringProp name="XPathExtractor.refname">getDepartureDateSEG1</stringProp>
              <stringProp name="XPathExtractor.matchNumber">-1</stringProp>
              <stringProp name="XPathExtractor.xpathQuery">/AirShoppingRS/DataLists/FlightSegmentList/FlightSegment[@SegmentKey=&apos;SEG1&apos;]/Departure/Date</stringProp>
              <boolProp name="XPathExtractor.validate">false</boolProp>
              <boolProp name="XPathExtractor.tolerant">false</boolProp>
              <boolProp name="XPathExtractor.namespace">false</boolProp>
            </XPathExtractor>
            <hashTree/>
            <XPathExtractor guiclass="XPathExtractorGui" testclass="XPathExtractor" testname="getDepartureTimeSEG1" enabled="true">
              <stringProp name="XPathExtractor.default">null</stringProp>
              <stringProp name="XPathExtractor.refname">getDepartureTimeSEG1</stringProp>
              <stringProp name="XPathExtractor.matchNumber">-1</stringProp>
              <stringProp name="XPathExtractor.xpathQuery">/AirShoppingRS/DataLists/FlightSegmentList/FlightSegment[@SegmentKey=&apos;SEG1&apos;]/Departure/Time</stringProp>
              <boolProp name="XPathExtractor.validate">false</boolProp>
              <boolProp name="XPathExtractor.tolerant">false</boolProp>
              <boolProp name="XPathExtractor.namespace">false</boolProp>
            </XPathExtractor>
            <hashTree/>
            <XPathExtractor guiclass="XPathExtractorGui" testclass="XPathExtractor" testname="getArrivalDateSEG1" enabled="true">
              <stringProp name="XPathExtractor.default">null</stringProp>
              <stringProp name="XPathExtractor.refname">getArrivalDateSEG1</stringProp>
              <stringProp name="XPathExtractor.matchNumber">-1</stringProp>
              <stringProp name="XPathExtractor.xpathQuery">/AirShoppingRS/DataLists/FlightSegmentList/FlightSegment[@SegmentKey=&apos;SEG1&apos;]/Arrival/Date</stringProp>
              <boolProp name="XPathExtractor.validate">false</boolProp>
              <boolProp name="XPathExtractor.tolerant">false</boolProp>
              <boolProp name="XPathExtractor.namespace">false</boolProp>
            </XPathExtractor>
            <hashTree/>
            <XPathExtractor guiclass="XPathExtractorGui" testclass="XPathExtractor" testname="getBaseAmountSEG1ADT1" enabled="true">
              <stringProp name="XPathExtractor.default">0</stringProp>
              <stringProp name="XPathExtractor.refname">getBaseAmountSEG1ADT1</stringProp>
              <stringProp name="XPathExtractor.matchNumber">-1</stringProp>
              <stringProp name="XPathExtractor.xpathQuery">/AirShoppingRS/OffersGroup/AirlineOffers/AirlineOffer[1]/PricedOffer/OfferPrice[1]/FareDetail/FareComponent[1]/PriceBreakdown/Price/BaseAmount</stringProp>
              <boolProp name="XPathExtractor.validate">false</boolProp>
              <boolProp name="XPathExtractor.tolerant">false</boolProp>
              <boolProp name="XPathExtractor.namespace">false</boolProp>
            </XPathExtractor>
            <hashTree/>
            <XPathExtractor guiclass="XPathExtractorGui" testclass="XPathExtractor" testname="getRemarksSEG1ADT1" enabled="true">
              <stringProp name="XPathExtractor.default">null</stringProp>
              <stringProp name="XPathExtractor.refname">getRemarksSEG1ADT1</stringProp>
              <stringProp name="XPathExtractor.matchNumber">-1</stringProp>
              <stringProp name="XPathExtractor.xpathQuery">/AirShoppingRS/OffersGroup/AirlineOffers/AirlineOffer[1]/PricedOffer/OfferPrice[1]/FareDetail/Remarks/Remark</stringProp>
              <boolProp name="XPathExtractor.validate">false</boolProp>
              <boolProp name="XPathExtractor.tolerant">false</boolProp>
              <boolProp name="XPathExtractor.namespace">false</boolProp>
            </XPathExtractor>
            <hashTree/>
            <XPathExtractor guiclass="XPathExtractorGui" testclass="XPathExtractor" testname="getFareBasisCodeSEG1ADT1" enabled="true">
              <stringProp name="XPathExtractor.default">0</stringProp>
              <stringProp name="XPathExtractor.refname">getFareBasisCodeSEG1ADT1</stringProp>
              <stringProp name="XPathExtractor.matchNumber">-1</stringProp>
              <stringProp name="XPathExtractor.xpathQuery">/AirShoppingRS/OffersGroup/AirlineOffers/AirlineOffer[1]/PricedOffer/OfferPrice[1]/FareDetail/FareComponent[1]/FareBasis/FareBasisCode/Code</stringProp>
              <boolProp name="XPathExtractor.validate">false</boolProp>
              <boolProp name="XPathExtractor.tolerant">false</boolProp>
              <boolProp name="XPathExtractor.namespace">false</boolProp>
            </XPathExtractor>
            <hashTree/>
            <XPathExtractor guiclass="XPathExtractorGui" testclass="XPathExtractor" testname="getTaxAmountSEG1ADT1" enabled="true">
              <stringProp name="XPathExtractor.default">0</stringProp>
              <stringProp name="XPathExtractor.refname">getTaxAmountSEG1ADT1</stringProp>
              <stringProp name="XPathExtractor.matchNumber">-1</stringProp>
              <stringProp name="XPathExtractor.xpathQuery">/AirShoppingRS/OffersGroup/AirlineOffers/AirlineOffer[1]/PricedOffer/OfferPrice[1]/FareDetail/FareComponent[1]/PriceBreakdown/Price/Taxes/Total</stringProp>
              <boolProp name="XPathExtractor.validate">false</boolProp>
              <boolProp name="XPathExtractor.tolerant">false</boolProp>
              <boolProp name="XPathExtractor.namespace">false</boolProp>
            </XPathExtractor>
            <hashTree/>
            <XPathExtractor guiclass="XPathExtractorGui" testclass="XPathExtractor" testname="getBaseAmountSEG1CHD1" enabled="true">
              <stringProp name="XPathExtractor.default">0</stringProp>
              <stringProp name="XPathExtractor.refname">getBaseAmountSEG1CHD1</stringProp>
              <stringProp name="XPathExtractor.matchNumber">-1</stringProp>
              <stringProp name="XPathExtractor.xpathQuery">/AirShoppingRS/OffersGroup/AirlineOffers/AirlineOffer[1]/PricedOffer/OfferPrice[2]/FareDetail/FareComponent[1]/PriceBreakdown/Price/BaseAmount</stringProp>
              <boolProp name="XPathExtractor.validate">false</boolProp>
              <boolProp name="XPathExtractor.tolerant">false</boolProp>
              <boolProp name="XPathExtractor.namespace">false</boolProp>
            </XPathExtractor>
            <hashTree/>
            <XPathExtractor guiclass="XPathExtractorGui" testclass="XPathExtractor" testname="getTaxAmountSEG1CHD1" enabled="true">
              <stringProp name="XPathExtractor.default">0</stringProp>
              <stringProp name="XPathExtractor.refname">getTaxAmountSEG1CHD1</stringProp>
              <stringProp name="XPathExtractor.matchNumber">-1</stringProp>
              <stringProp name="XPathExtractor.xpathQuery">/AirShoppingRS/OffersGroup/AirlineOffers/AirlineOffer[1]/PricedOffer/OfferPrice[2]/FareDetail/FareComponent[1]/PriceBreakdown/Price/Taxes/Total</stringProp>
              <boolProp name="XPathExtractor.validate">false</boolProp>
              <boolProp name="XPathExtractor.tolerant">false</boolProp>
              <boolProp name="XPathExtractor.namespace">false</boolProp>
            </XPathExtractor>
            <hashTree/>
            <XPathExtractor guiclass="XPathExtractorGui" testclass="XPathExtractor" testname="getFareBasisCodeSEG1CHD1" enabled="true">
              <stringProp name="XPathExtractor.default">0</stringProp>
              <stringProp name="XPathExtractor.refname">getFareBasisCodeSEG1CHD1</stringProp>
              <stringProp name="XPathExtractor.matchNumber">-1</stringProp>
              <stringProp name="XPathExtractor.xpathQuery">/AirShoppingRS/OffersGroup/AirlineOffers/AirlineOffer[1]/PricedOffer/OfferPrice[2]/FareDetail/FareComponent[1]/FareBasis/FareBasisCode/Code</stringProp>
              <boolProp name="XPathExtractor.validate">false</boolProp>
              <boolProp name="XPathExtractor.tolerant">false</boolProp>
              <boolProp name="XPathExtractor.namespace">false</boolProp>
            </XPathExtractor>
            <hashTree/>
            <XPathExtractor guiclass="XPathExtractorGui" testclass="XPathExtractor" testname="getRemarksSEG1CHD1" enabled="true">
              <stringProp name="XPathExtractor.default">null</stringProp>
              <stringProp name="XPathExtractor.refname">getRemarksSEG1CHD1</stringProp>
              <stringProp name="XPathExtractor.matchNumber">-1</stringProp>
              <stringProp name="XPathExtractor.xpathQuery">/AirShoppingRS/OffersGroup/AirlineOffers/AirlineOffer[1]/PricedOffer/OfferPrice[2]/FareDetail/Remarks/Remark</stringProp>
              <boolProp name="XPathExtractor.validate">false</boolProp>
              <boolProp name="XPathExtractor.tolerant">false</boolProp>
              <boolProp name="XPathExtractor.namespace">false</boolProp>
            </XPathExtractor>
            <hashTree/>
            <XPathExtractor guiclass="XPathExtractorGui" testclass="XPathExtractor" testname="getPayment" enabled="true">
              <stringProp name="XPathExtractor.default">0</stringProp>
              <stringProp name="XPathExtractor.refname">getPayment</stringProp>
              <stringProp name="XPathExtractor.matchNumber">-1</stringProp>
              <stringProp name="XPathExtractor.xpathQuery">sum(/AirShoppingRS/OffersGroup/AirlineOffers/AirlineOffer[1]/PricedOffer/OfferPrice[.]/FareDetail/FareComponent[.]/PriceBreakdown/Price/Taxes/Total | /AirShoppingRS/OffersGroup/AirlineOffers/AirlineOffer[1]/PricedOffer/OfferPrice[.]/FareDetail/FareComponent[.]/PriceBreakdown/Price/BaseAmount)+ 25* (${adt_number} + ${chd_number}) </stringProp>
              <boolProp name="XPathExtractor.validate">false</boolProp>
              <boolProp name="XPathExtractor.tolerant">false</boolProp>
              <boolProp name="XPathExtractor.namespace">false</boolProp>
              <stringProp name="TestPlan.comments">${__doubleSum(${getBaseAmountSEG1ADT1}, ${getTaxAmountSEG1ADT1},${getBaseAmountSEG1CHD1},${getTaxAmountSEG1CHD1} )}</stringProp>
            </XPathExtractor>
            <hashTree/>
          </hashTree>
          <TestAction guiclass="TestActionGui" testclass="TestAction" testname="Delay" enabled="true">
            <intProp name="ActionProcessor.action">1</intProp>
            <intProp name="ActionProcessor.target">0</intProp>
            <stringProp name="ActionProcessor.duration">3000 * ${delayForThreads}</stringProp>
          </TestAction>
          <hashTree/>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="OrderCreateRQ One Way With CHD" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot; standalone=&quot;yes&quot;?&gt;&#xd;
&lt;edis:OrderCreateRQ EchoToken=&quot;${cntr}-${origin}-${destination}-${adt_number}ADT-${chd_number}CHD-${numberOfONDs}OND&quot; TimeStamp=&quot;2016-03-31T00:00:00.000+03:00&quot; Version=&quot;IATA2016.2&quot; xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot; &#xd;
xmlns=&quot;http://www.iata.org/IATA/EDIST&quot; xmlns:edis=&quot;http://www.iata.org/IATA/EDIST&quot;&gt;&#xd;
		&lt;PointOfSale id=&quot;U028m-RR4sT-636Y2-f5GqP&quot; AgentDutyCode=&quot;11&quot;&gt;&#xd;
		&lt;Location&gt;&#xd;
			&lt;CountryCode&gt;US&lt;/CountryCode&gt;&#xd;
			&lt;CityCode&gt;MEM&lt;/CityCode&gt;&#xd;
		&lt;/Location&gt;&#xd;
		&lt;TouchPoint&gt;&#xd;
			&lt;Device&gt;&#xd;
				&lt;Code&gt;2&lt;/Code&gt;&#xd;
				&lt;Definition&gt;Web Browser&lt;/Definition&gt;&#xd;
				&lt;Position&gt;&#xd;
					&lt;Latitude&gt;38.89756&lt;/Latitude&gt;&#xd;
					&lt;Longitude&gt;-77.03650&lt;/Longitude&gt;&#xd;
					&lt;NAC&gt;8KD7V PGGM0&lt;/NAC&gt;&#xd;
				&lt;/Position&gt;&#xd;
			&lt;/Device&gt;&#xd;
		&lt;/TouchPoint&gt;&#xd;
	&lt;/PointOfSale&gt;&#xd;
	&lt;Document&gt;&#xd;
		&lt;Name&gt;NDC-Gateway&lt;/Name&gt;&#xd;
		&lt;ReferenceVersion&gt;1.0&lt;/ReferenceVersion&gt;&#xd;
	&lt;/Document&gt;&#xd;
	&lt;Party&gt;&#xd;
		&lt;Sender&gt;&#xd;
			&lt;TravelAgencySender&gt;&#xd;
				&lt;Name&gt;1012&lt;/Name&gt;&#xd;
				&lt;Type&gt;TravelAgency&lt;/Type&gt;&#xd;
				&lt;PseudoCity&gt;MEM001&lt;/PseudoCity&gt;&#xd;
				&lt;IATA_Number&gt;35200421&lt;/IATA_Number&gt;&#xd;
				&lt;AgencyID&gt;209/209M&lt;/AgencyID&gt;&#xd;
				&lt;AgentUser&gt;&#xd;
					&lt;AgentUserID&gt;593339377051100&lt;/AgentUserID&gt;&#xd;
				&lt;/AgentUser&gt;&#xd;
			&lt;/TravelAgencySender&gt;&#xd;
		&lt;/Sender&gt;&#xd;
		&lt;Participants&gt;&#xd;
			&lt;Participant&gt;&#xd;
				&lt;EnabledSystemParticipant SequenceNumber=&quot;1&quot;&gt;&#xd;
					&lt;SystemID&gt;593339377051100&lt;/SystemID&gt;&#xd;
				&lt;/EnabledSystemParticipant&gt;&#xd;
				&lt;CorporateParticipant&gt;&#xd;
					&lt;!-- &lt;Name&gt;DISCOUNT 20.5&lt;/Name&gt; --&gt;&#xd;
					&lt;ID&gt;345&lt;/ID&gt;&#xd;
					&lt;CorporateCode&gt;man8432&lt;/CorporateCode&gt;&#xd;
				&lt;/CorporateParticipant&gt;&#xd;
			&lt;/Participant&gt;&#xd;
		&lt;/Participants&gt;&#xd;
		&lt;Recipient&gt;&#xd;
			&lt;MarketingCarrierRecipient&gt;&#xd;
				&lt;AirlineID&gt;9X&lt;/AirlineID&gt;&#xd;
			&lt;/MarketingCarrierRecipient&gt;&#xd;
		&lt;/Recipient&gt;&#xd;
	&lt;/Party&gt;&#xd;
	&lt;Query&gt;&#xd;
		&lt;Passengers&gt;&#xd;
			&lt;Passenger ObjectKey=&quot;ADT1&quot;&gt;&#xd;
				&lt;PTC Quantity=&quot;1&quot;&gt;ADT&lt;/PTC&gt;&#xd;
				&lt;Age&gt;&#xd;
					&lt;BirthDate&gt;1980-03-06&lt;/BirthDate&gt;&#xd;
				&lt;/Age&gt;&#xd;
				&lt;Name&gt;&#xd;
					&lt;Surname&gt;Jaffa&lt;/Surname&gt;&#xd;
					&lt;Given&gt;Eric&lt;/Given&gt;&#xd;
					&lt;Middle&gt;Edward&lt;/Middle&gt;&#xd;
				&lt;/Name&gt;&#xd;
				&lt;Contacts&gt;&#xd;
					&lt;Contact&gt;&#xd;
						&lt;EmailContact&gt;&#xd;
							&lt;Address&gt;jaffa@unisys.com&lt;/Address&gt;&#xd;
						&lt;/EmailContact&gt;&#xd;
					&lt;/Contact&gt;&#xd;
				&lt;/Contacts&gt;&#xd;
				&lt;Gender&gt;Male&lt;/Gender&gt;&#xd;
			&lt;/Passenger&gt;&#xd;
			&lt;Passenger ObjectKey=&quot;CHD1&quot;&gt;&#xd;
				&lt;PTC Quantity=&quot;1&quot;&gt;CHD&lt;/PTC&gt;&#xd;
				&lt;Age&gt;&#xd;
					&lt;BirthDate&gt;2013-03-06&lt;/BirthDate&gt;&#xd;
				&lt;/Age&gt;&#xd;
				&lt;Name&gt;&#xd;
					&lt;Surname&gt;Kumar&lt;/Surname&gt;&#xd;
					&lt;Given&gt;Mithal&lt;/Given&gt;&#xd;
					&lt;Middle&gt;Savan&lt;/Middle&gt;&#xd;
				&lt;/Name&gt;&#xd;
				&lt;Contacts&gt;&#xd;
					&lt;Contact&gt;&#xd;
						&lt;EmailContact&gt;&#xd;
							&lt;Address&gt;kumar@unisys.com&lt;/Address&gt;&#xd;
						&lt;/EmailContact&gt;&#xd;
					&lt;/Contact&gt;&#xd;
				&lt;/Contacts&gt;&#xd;
				&lt;Gender&gt;Male&lt;/Gender&gt;&#xd;
			&lt;/Passenger&gt;&#xd;
		&lt;/Passengers&gt;&#xd;
		&lt;OrderItems&gt;&#xd;
			&lt;ShoppingResponse&gt;&#xd;
				&lt;Owner&gt;NW&lt;/Owner&gt;&#xd;
				&lt;ResponseID&gt;${getResponseID}&lt;/ResponseID&gt;&#xd;
				&lt;Offers&gt;&#xd;
					&lt;Offer&gt;&#xd;
						&lt;OfferID Owner=&quot;9X&quot;&gt;SOL1#OD1&lt;/OfferID&gt;&#xd;
						&lt;OfferItems&gt;&#xd;
							&lt;OfferItem&gt;&#xd;
								&lt;OfferItemID Owner=&quot;9X&quot;&gt;SOL1#OD1#ADT1&lt;/OfferItemID&gt;&#xd;
								&lt;Passengers&gt;&#xd;
									&lt;PassengerReference&gt;ADT1&lt;/PassengerReference&gt;&#xd;
								&lt;/Passengers&gt;&#xd;
								&lt;ApplicableFlight&gt;&#xd;
									&lt;OriginDestinationReferences&gt;OD1&lt;/OriginDestinationReferences&gt;&#xd;
								&lt;/ApplicableFlight&gt;&#xd;
								&lt;AssociatedServices&gt;&#xd;
									&lt;AssociatedService refs=&quot;SV9&quot;&gt;&#xd;
										&lt;ServiceID Owner=&quot;9X&quot;&gt;SV9&lt;/ServiceID&gt;&#xd;
									&lt;/AssociatedService&gt;&#xd;
									&lt;AssociatedService refs=&quot;SV2&quot;&gt;&#xd;
										&lt;ServiceID Owner=&quot;9X&quot;&gt;SV2&lt;/ServiceID&gt;&#xd;
									&lt;/AssociatedService&gt;&#xd;
								&lt;/AssociatedServices&gt;&#xd;
							&lt;/OfferItem&gt;&#xd;
							&lt;OfferItem&gt;&#xd;
								&lt;OfferItemID Owner=&quot;9X&quot;&gt;SOL1#OD1#CHD1&lt;/OfferItemID&gt;&#xd;
								&lt;Passengers&gt;&#xd;
									&lt;PassengerReference&gt;CHD1&lt;/PassengerReference&gt;&#xd;
								&lt;/Passengers&gt;&#xd;
								&lt;ApplicableFlight&gt;&#xd;
									&lt;OriginDestinationReferences&gt;OD1&lt;/OriginDestinationReferences&gt;&#xd;
								&lt;/ApplicableFlight&gt;&#xd;
								&lt;AssociatedServices&gt;&#xd;
									&lt;AssociatedService refs=&quot;SV9&quot;&gt;&#xd;
										&lt;ServiceID Owner=&quot;9X&quot;&gt;SV9&lt;/ServiceID&gt;&#xd;
									&lt;/AssociatedService&gt;&#xd;
									&lt;AssociatedService refs=&quot;SV2&quot;&gt;&#xd;
										&lt;ServiceID Owner=&quot;9X&quot;&gt;SV2&lt;/ServiceID&gt;&#xd;
									&lt;/AssociatedService&gt;&#xd;
								&lt;/AssociatedServices&gt;&#xd;
							&lt;/OfferItem&gt;&#xd;
						&lt;/OfferItems&gt;&#xd;
					&lt;/Offer&gt;&#xd;
				&lt;/Offers&gt;&#xd;
			&lt;/ShoppingResponse&gt;&#xd;
			&lt;OfferItem&gt;&#xd;
				&lt;OfferItemID Owner=&quot;9X&quot;&gt;SOL1#OD1#ADT1&lt;/OfferItemID&gt;&#xd;
				&lt;OfferItemType&gt;&#xd;
					&lt;DetailedFlightItem&gt;&#xd;
						&lt;OriginDestination&gt;&#xd;
							&lt;Flight&gt;&#xd;
								&lt;Departure&gt;&#xd;
									&lt;AirportCode&gt;${origin}&lt;/AirportCode&gt;&#xd;
									&lt;Date&gt;${getDepartureDateSEG1}&lt;/Date&gt;&#xd;
									&lt;Time&gt;${getDepartureTimeSEG1}&lt;/Time&gt;&#xd;
								&lt;/Departure&gt;&#xd;
								&lt;Arrival&gt;&#xd;
									&lt;AirportCode&gt;${destination}&lt;/AirportCode&gt;&#xd;
									&lt;Date&gt;${getArrivalDateSEG1}&lt;/Date&gt;&#xd;
								&lt;/Arrival&gt;&#xd;
								&lt;MarketingCarrier&gt;&#xd;
									&lt;AirlineID&gt;NW&lt;/AirlineID&gt;&#xd;
									&lt;FlightNumber&gt;${getFlightNumber}&lt;/FlightNumber&gt;&#xd;
								&lt;/MarketingCarrier&gt;&#xd;
								&lt;OperatingCarrier&gt;&#xd;
									&lt;AirlineID&gt;NW&lt;/AirlineID&gt;&#xd;
									&lt;FlightNumber&gt;${getFlightNumber}&lt;/FlightNumber&gt;&#xd;
								&lt;/OperatingCarrier&gt;&#xd;
							&lt;/Flight&gt;&#xd;
						&lt;/OriginDestination&gt;&#xd;
						&lt;FareDetail&gt;&#xd;
							&lt;FareComponent&gt;&#xd;
								&lt;SegmentReference&gt;SEG1&lt;/SegmentReference&gt;&#xd;
								&lt;PriceBreakdown&gt;&#xd;
									&lt;Price&gt;&#xd;
										&lt;BaseAmount Code=&quot;USD&quot;&gt;${getBaseAmountSEG1ADT1}&lt;/BaseAmount&gt;&#xd;
										&lt;Taxes&gt;&#xd;
											&lt;Total Code=&quot;USD&quot;&gt;${getTaxAmountSEG1ADT1}&lt;/Total&gt;&#xd;
										&lt;/Taxes&gt;&#xd;
									&lt;/Price&gt;&#xd;
								&lt;/PriceBreakdown&gt;&#xd;
								&lt;FareBasis&gt;&#xd;
									&lt;FareBasisCode&gt;&#xd;
										&lt;Code&gt;${getFareBasisCodeSEG1ADT1}&lt;/Code&gt;&#xd;
									&lt;/FareBasisCode&gt;&#xd;
									&lt;RBD&gt;Y&lt;/RBD&gt;&#xd;
								&lt;/FareBasis&gt;&#xd;
								&lt;FareRules&gt;&#xd;
									&lt;Remarks&gt;&#xd;
										&lt;Remark&gt;${getRemarksSEG1ADT1}&lt;/Remark&gt;&#xd;
									&lt;/Remarks&gt;&#xd;
								&lt;/FareRules&gt;&#xd;
							&lt;/FareComponent&gt;&#xd;
						&lt;/FareDetail&gt;&#xd;
					&lt;/DetailedFlightItem&gt;&#xd;
				&lt;/OfferItemType&gt;&#xd;
				&lt;TimeLimits&gt;&#xd;
					&lt;TimeLimit&gt;&#xd;
						&lt;PriceGuaranteeTimeLimit Timestamp=&quot;${getPriceGuaranteeTimeLimit}&quot;/&gt;&#xd;
						&lt;TicketByTimeLimit&gt;&#xd;
							&lt;TicketBy&gt;${getTicketBy}&lt;/TicketBy&gt;&#xd;
						&lt;/TicketByTimeLimit&gt;&#xd;
					&lt;/TimeLimit&gt;&#xd;
				&lt;/TimeLimits&gt;&#xd;
			&lt;/OfferItem&gt;&#xd;
			&lt;OfferItem&gt;&#xd;
				&lt;OfferItemID Owner=&quot;9X&quot;&gt;SOL1#OD1#CHD1&lt;/OfferItemID&gt;&#xd;
				&lt;OfferItemType&gt;&#xd;
					&lt;DetailedFlightItem&gt;&#xd;
						&lt;OriginDestination&gt;&#xd;
							&lt;Flight&gt;&#xd;
								&lt;Departure&gt;&#xd;
									&lt;AirportCode&gt;${origin}&lt;/AirportCode&gt;&#xd;
									&lt;Date&gt;${getDepartureDateSEG1}&lt;/Date&gt;&#xd;
									&lt;Time&gt;${getDepartureTimeSEG1}&lt;/Time&gt;&#xd;
								&lt;/Departure&gt;&#xd;
								&lt;Arrival&gt;&#xd;
									&lt;AirportCode&gt;${destination}&lt;/AirportCode&gt;&#xd;
									&lt;Date&gt;${getArrivalDateSEG1}&lt;/Date&gt;&#xd;
								&lt;/Arrival&gt;&#xd;
								&lt;MarketingCarrier&gt;&#xd;
									&lt;AirlineID&gt;NW&lt;/AirlineID&gt;&#xd;
									&lt;FlightNumber&gt;${getFlightNumber}&lt;/FlightNumber&gt;&#xd;
								&lt;/MarketingCarrier&gt;&#xd;
								&lt;OperatingCarrier&gt;&#xd;
									&lt;AirlineID&gt;NW&lt;/AirlineID&gt;&#xd;
									&lt;FlightNumber&gt;${getFlightNumber}&lt;/FlightNumber&gt;&#xd;
								&lt;/OperatingCarrier&gt;&#xd;
							&lt;/Flight&gt;&#xd;
						&lt;/OriginDestination&gt;&#xd;
						&lt;FareDetail&gt;&#xd;
							&lt;FareComponent&gt;&#xd;
								&lt;SegmentReference&gt;SEG1&lt;/SegmentReference&gt;&#xd;
								&lt;PriceBreakdown&gt;&#xd;
									&lt;Price&gt;&#xd;
										&lt;BaseAmount Code=&quot;USD&quot;&gt;${getBaseAmountSEG1CHD1}&lt;/BaseAmount&gt;&#xd;
										&lt;Taxes&gt;&#xd;
											&lt;Total Code=&quot;USD&quot;&gt;${getTaxAmountSEG1CHD1}&lt;/Total&gt;&#xd;
										&lt;/Taxes&gt;&#xd;
									&lt;/Price&gt;&#xd;
								&lt;/PriceBreakdown&gt;&#xd;
								&lt;FareBasis&gt;&#xd;
									&lt;FareBasisCode&gt;&#xd;
										&lt;Code&gt;${getFareBasisCodeSEG1CHD1}&lt;/Code&gt;&#xd;
									&lt;/FareBasisCode&gt;&#xd;
									&lt;RBD&gt;Y&lt;/RBD&gt;&#xd;
								&lt;/FareBasis&gt;&#xd;
								&lt;FareRules&gt;&#xd;
									&lt;Remarks&gt;&#xd;
										&lt;Remark&gt;${getRemarksSEG1CHD1}&lt;/Remark&gt;&#xd;
									&lt;/Remarks&gt;&#xd;
								&lt;/FareRules&gt;&#xd;
							&lt;/FareComponent&gt;&#xd;
						&lt;/FareDetail&gt;&#xd;
					&lt;/DetailedFlightItem&gt;&#xd;
				&lt;/OfferItemType&gt;&#xd;
				&lt;TimeLimits&gt;&#xd;
					&lt;TimeLimit&gt;&#xd;
						&lt;PriceGuaranteeTimeLimit Timestamp=&quot;${getPriceGuaranteeTimeLimit}&quot;/&gt;&#xd;
						&lt;TicketByTimeLimit&gt;&#xd;
							&lt;TicketBy&gt;${getTicketBy}&lt;/TicketBy&gt;&#xd;
						&lt;/TicketByTimeLimit&gt;&#xd;
					&lt;/TimeLimit&gt;&#xd;
				&lt;/TimeLimits&gt;&#xd;
			&lt;/OfferItem&gt;&#xd;
		&lt;/OrderItems&gt;&#xd;
		&lt;Payments&gt;&#xd;
			&lt;Payment&gt;&#xd;
				&lt;Method&gt;&#xd;
					&lt;PaymentCard&gt;&#xd;
						&lt;CardType&gt;Visa&lt;/CardType&gt;&#xd;
						&lt;CardCode&gt;VI&lt;/CardCode&gt;&#xd;
						&lt;CardNumber&gt;4111111111111111&lt;/CardNumber&gt;&#xd;
						&lt;SeriesCode&gt;584&lt;/SeriesCode&gt;&#xd;
						&lt;EffectiveExpireDate&gt;&#xd;
							&lt;Expiration&gt;1220&lt;/Expiration&gt;&#xd;
						&lt;/EffectiveExpireDate&gt;&#xd;
					&lt;/PaymentCard&gt;&#xd;
				&lt;/Method&gt;&#xd;
				&lt;Amount Code=&quot;USD&quot; Taxable=&quot;true&quot;&gt;${getPayment}&lt;/Amount&gt;&#xd;
				&lt;Payer&gt;&#xd;
					&lt;Name&gt;&#xd;
						&lt;Surname&gt;Kumar&lt;/Surname&gt;&#xd;
						&lt;Given&gt;Mithalesh&lt;/Given&gt;&#xd;
					&lt;/Name&gt;&#xd;
					&lt;Contacts&gt;&#xd;
						&lt;Contact&gt;&#xd;
							&lt;AddressContact&gt;&#xd;
								&lt;Street&gt;22 Main Street&lt;/Street&gt;&#xd;
								&lt;CityName&gt;FRA&lt;/CityName&gt;&#xd;
								&lt;PostalCode&gt;14201&lt;/PostalCode&gt;&#xd;
								&lt;CountryCode&gt;DE&lt;/CountryCode&gt;&#xd;
							&lt;/AddressContact&gt;&#xd;
							&lt;EmailContact&gt;&#xd;
								&lt;Address&gt;ramesh@asdfadfsa.com&lt;/Address&gt;&#xd;
							&lt;/EmailContact&gt;&#xd;
						&lt;/Contact&gt;&#xd;
					&lt;/Contacts&gt;&#xd;
				&lt;/Payer&gt;&#xd;
			&lt;/Payment&gt;&#xd;
		&lt;/Payments&gt;&#xd;
		&lt;DataLists&gt;&#xd;
			&lt;edis:CarryOnAllowanceList&gt;&#xd;
				&lt;edis:CarryOnAllowance ListKey=&quot;AW1&quot;&gt;&#xd;
					&lt;edis:DimensionAllowance&gt;&#xd;
						&lt;edis:DimensionUOM&gt;Inch&lt;/edis:DimensionUOM&gt;&#xd;
						&lt;edis:Dimensions&gt;&#xd;
							&lt;edis:Category&gt;L&lt;/edis:Category&gt;&#xd;
							&lt;edis:MaxValue&gt;30&lt;/edis:MaxValue&gt;&#xd;
						&lt;/edis:Dimensions&gt;&#xd;
						&lt;edis:Dimensions&gt;&#xd;
							&lt;edis:Category&gt;W&lt;/edis:Category&gt;&#xd;
							&lt;edis:MaxValue&gt;30&lt;/edis:MaxValue&gt;&#xd;
						&lt;/edis:Dimensions&gt;&#xd;
						&lt;edis:Dimensions&gt;&#xd;
							&lt;edis:Category&gt;H&lt;/edis:Category&gt;&#xd;
							&lt;edis:MaxValue&gt;30&lt;/edis:MaxValue&gt;&#xd;
						&lt;/edis:Dimensions&gt;&#xd;
					&lt;/edis:DimensionAllowance&gt;&#xd;
					&lt;edis:WeightAllowance&gt;&#xd;
						&lt;edis:MaximumWeight&gt;&#xd;
							&lt;edis:Value&gt;5&lt;/edis:Value&gt;&#xd;
							&lt;edis:UOM&gt;Kilogram&lt;/edis:UOM&gt;&#xd;
						&lt;/edis:MaximumWeight&gt;&#xd;
					&lt;/edis:WeightAllowance&gt;&#xd;
				&lt;/edis:CarryOnAllowance&gt;&#xd;
			&lt;/edis:CarryOnAllowanceList&gt;&#xd;
			&lt;edis:CheckedBagAllowanceList&gt;&#xd;
				&lt;edis:CheckedBagAllowance ListKey=&quot;AW2&quot;&gt;&#xd;
					&lt;edis:DimensionAllowance&gt;&#xd;
						&lt;edis:DimensionUOM&gt;Inch&lt;/edis:DimensionUOM&gt;&#xd;
						&lt;edis:Dimensions&gt;&#xd;
							&lt;edis:Category&gt;L&lt;/edis:Category&gt;&#xd;
							&lt;edis:MaxValue&gt;15&lt;/edis:MaxValue&gt;&#xd;
						&lt;/edis:Dimensions&gt;&#xd;
						&lt;edis:Dimensions&gt;&#xd;
							&lt;edis:Category&gt;W&lt;/edis:Category&gt;&#xd;
							&lt;edis:MaxValue&gt;16&lt;/edis:MaxValue&gt;&#xd;
						&lt;/edis:Dimensions&gt;&#xd;
						&lt;edis:Dimensions&gt;&#xd;
							&lt;edis:Category&gt;H&lt;/edis:Category&gt;&#xd;
							&lt;edis:MaxValue&gt;17&lt;/edis:MaxValue&gt;&#xd;
						&lt;/edis:Dimensions&gt;&#xd;
					&lt;/edis:DimensionAllowance&gt;&#xd;
					&lt;edis:WeightAllowance&gt;&#xd;
						&lt;edis:MaximumWeight&gt;&#xd;
							&lt;edis:Value&gt;10&lt;/edis:Value&gt;&#xd;
							&lt;edis:UOM&gt;Kilogram&lt;/edis:UOM&gt;&#xd;
						&lt;/edis:MaximumWeight&gt;&#xd;
					&lt;/edis:WeightAllowance&gt;&#xd;
				&lt;/edis:CheckedBagAllowance&gt;&#xd;
			&lt;/edis:CheckedBagAllowanceList&gt;&#xd;
			&lt;FlightSegmentList&gt;&#xd;
				&lt;FlightSegment SegmentKey=&quot;SEG1&quot;&gt;&#xd;
					&lt;Departure&gt;&#xd;
						&lt;AirportCode&gt;${origin}&lt;/AirportCode&gt;&#xd;
						&lt;Date&gt;${getDepartureDateSEG1}&lt;/Date&gt;&#xd;
						&lt;Time&gt;${getDepartureTimeSEG1}&lt;/Time&gt;&#xd;
					&lt;/Departure&gt;&#xd;
					&lt;Arrival&gt;&#xd;
						&lt;AirportCode&gt;${destination}&lt;/AirportCode&gt;&#xd;
						&lt;Date&gt;${getArrivalDateSEG1}&lt;/Date&gt;&#xd;
					&lt;/Arrival&gt;&#xd;
					&lt;MarketingCarrier&gt;&#xd;
						&lt;AirlineID&gt;9X&lt;/AirlineID&gt;&#xd;
						&lt;FlightNumber&gt;${getFlightNumber}&lt;/FlightNumber&gt;&#xd;
					&lt;/MarketingCarrier&gt;&#xd;
					&lt;OperatingCarrier&gt;&#xd;
						&lt;AirlineID&gt;9X&lt;/AirlineID&gt;&#xd;
						&lt;FlightNumber&gt;${getFlightNumber}&lt;/FlightNumber&gt;&#xd;
					&lt;/OperatingCarrier&gt;&#xd;
					&lt;Equipment&gt;&#xd;
						&lt;AircraftCode&gt;${getAircraftCode}&lt;/AircraftCode&gt;&#xd;
					&lt;/Equipment&gt;&#xd;
					&lt;ClassOfService&gt;&#xd;
						&lt;Code&gt;${getClassOfService}&lt;/Code&gt;&#xd;
						&lt;MarketingName&gt;Economy&lt;/MarketingName&gt;&#xd;
					&lt;/ClassOfService&gt;&#xd;
					&lt;FlightDetail&gt;&#xd;
						&lt;FlightDuration&gt;&#xd;
							&lt;Value&gt;PT5H0M&lt;/Value&gt;&#xd;
						&lt;/FlightDuration&gt;&#xd;
					&lt;/FlightDetail&gt;&#xd;
				&lt;/FlightSegment&gt;&#xd;
			&lt;/FlightSegmentList&gt;&#xd;
			&lt;FlightList&gt;&#xd;
				&lt;Flight FlightKey=&quot;FL1&quot;&gt;&#xd;
					&lt;Journey&gt;&#xd;
						&lt;Time&gt;PT16H10M&lt;/Time&gt;&#xd;
					&lt;/Journey&gt;&#xd;
					&lt;SegmentReferences&gt;SEG1&lt;/SegmentReferences&gt;&#xd;
				&lt;/Flight&gt;&#xd;
			&lt;/FlightList&gt;&#xd;
			&lt;OriginDestinationList&gt;&#xd;
				&lt;OriginDestination OriginDestinationKey=&quot;OD1&quot;&gt;&#xd;
					&lt;DepartureCode&gt;${origin}&lt;/DepartureCode&gt;&#xd;
					&lt;ArrivalCode&gt;${destination}&lt;/ArrivalCode&gt;&#xd;
					&lt;FlightReferences&gt;FL1&lt;/FlightReferences&gt;&#xd;
				&lt;/OriginDestination&gt;&#xd;
			&lt;/OriginDestinationList&gt;&#xd;
				&lt;ServiceList&gt;&#xd;
				&lt;Service ObjectKey=&quot;SVC00104&quot;&gt;&#xd;
					&lt;ServiceID Owner=&quot;9X&quot;&gt;SVC00104&lt;/ServiceID&gt;&#xd;
					&lt;Name&gt;Southern&lt;/Name&gt;&#xd;
					&lt;Encoding&gt;&#xd;
						&lt;Code&gt;BG2&lt;/Code&gt;&#xd;
						&lt;SubCode&gt;1&lt;/SubCode&gt;&#xd;
					&lt;/Encoding&gt;&#xd;
					&lt;Descriptions&gt;&#xd;
						&lt;Description&gt;&#xd;
							&lt;Text&gt;Get a piece of baggage with you up to 23Kg&lt;/Text&gt;&#xd;
							&lt;Media&gt;&#xd;
								&lt;MediaLink&gt;//rcms-dev.jrtechnologies.com/iiif/2/462f918d-4512-4a60-b086-a29a07743ba2.jpeg/full/full/0/default.png&lt;/MediaLink&gt;&#xd;
							&lt;/Media&gt;&#xd;
						&lt;/Description&gt;&#xd;
					&lt;/Descriptions&gt;&#xd;
					&lt;Price&gt;&#xd;
						&lt;Total Taxable=&quot;false&quot; Code=&quot;USD&quot;&gt;120&lt;/Total&gt;&#xd;
						&lt;RefundableValue&gt;&#xd;
							&lt;Amount&gt;0&lt;/Amount&gt;&#xd;
						&lt;/RefundableValue&gt;&#xd;
						&lt;Taxes&gt;&#xd;
							&lt;Total&gt;0&lt;/Total&gt;&#xd;
						&lt;/Taxes&gt;&#xd;
						&lt;PassengerReferences&gt;SH1 SH2 SH3&lt;/PassengerReferences&gt;&#xd;
					&lt;/Price&gt;&#xd;
					&lt;Associations&gt;&#xd;
						&lt;Traveler&gt;&#xd;
							&lt;TravelerReferences&gt;SH1&lt;/TravelerReferences&gt;&#xd;
						&lt;/Traveler&gt;&#xd;
						&lt;Flight&gt;&#xd;
							&lt;SegmentReferences&gt;SEG1 SEG2&lt;/SegmentReferences&gt;&#xd;
						&lt;/Flight&gt;&#xd;
					&lt;/Associations&gt;&#xd;
				&lt;/Service&gt;&#xd;
				&lt;Service ObjectKey=&quot;SVC00105&quot;&gt;&#xd;
					&lt;ServiceID Owner=&quot;9X&quot;&gt;SVC00105&lt;/ServiceID&gt;&#xd;
					&lt;Name&gt;Southern Free Bag&lt;/Name&gt;&#xd;
					&lt;Encoding&gt;&#xd;
						&lt;Code&gt;BG&lt;/Code&gt;&#xd;
						&lt;SubCode&gt;1&lt;/SubCode&gt;&#xd;
					&lt;/Encoding&gt;&#xd;
					&lt;Descriptions&gt;&#xd;
						&lt;Description&gt;&#xd;
							&lt;Text&gt;All passengers can carry 1 piece of baggage for free.&lt;/Text&gt;&#xd;
							&lt;Media&gt;&#xd;
								&lt;MediaLink&gt;//rcms-dev.jrtechnologies.com/iiif/2/e1a008db-6b04-4b20-b63d-fd8cc034c58a.jpeg/full/full/0/default.png&lt;/MediaLink&gt;&#xd;
							&lt;/Media&gt;&#xd;
							&lt;Media&gt;&#xd;
								&lt;MediaLink&gt;//rcms-dev.jrtechnologies.com/iiif/2/462f918d-4512-4a60-b086-a29a07743ba2.jpeg/full/full/0/default.png&lt;/MediaLink&gt;&#xd;
							&lt;/Media&gt;&#xd;
						&lt;/Description&gt;&#xd;
					&lt;/Descriptions&gt;&#xd;
					&lt;Price&gt;&#xd;
						&lt;Total Taxable=&quot;false&quot; Code=&quot;USD&quot;&gt;0&lt;/Total&gt;&#xd;
						&lt;RefundableValue&gt;&#xd;
							&lt;Amount&gt;0&lt;/Amount&gt;&#xd;
						&lt;/RefundableValue&gt;&#xd;
						&lt;Taxes&gt;&#xd;
							&lt;Total&gt;0&lt;/Total&gt;&#xd;
						&lt;/Taxes&gt;&#xd;
						&lt;PassengerReferences&gt;SH1 SH2&lt;/PassengerReferences&gt;&#xd;
					&lt;/Price&gt;&#xd;
					&lt;Associations&gt;&#xd;
						&lt;Traveler&gt;&#xd;
							&lt;TravelerReferences&gt;ADT2&lt;/TravelerReferences&gt;&#xd;
						&lt;/Traveler&gt;&#xd;
						&lt;Flight&gt;&#xd;
							&lt;SegmentReferences&gt;SEG1 SEG2 SEG3 SEG4&lt;/SegmentReferences&gt;&#xd;
						&lt;/Flight&gt;&#xd;
					&lt;/Associations&gt;&#xd;
					&lt;Associations&gt;&#xd;
						&lt;Traveler&gt;&#xd;
							&lt;TravelerReferences&gt;ADT1&lt;/TravelerReferences&gt;&#xd;
						&lt;/Traveler&gt;&#xd;
						&lt;Flight&gt;&#xd;
							&lt;SegmentReferences&gt;SEG1 SEG2 SEG3 SEG4&lt;/SegmentReferences&gt;&#xd;
						&lt;/Flight&gt;&#xd;
					&lt;/Associations&gt;&#xd;
				&lt;/Service&gt;&#xd;
			&lt;/ServiceList&gt;&#xd;
		&lt;/DataLists&gt;&#xd;
	&lt;/Query&gt;&#xd;
&lt;/edis:OrderCreateRQ&gt;&#xd;
</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${IP}</stringProp>
            <stringProp name="HTTPSampler.port">${port}</stringProp>
            <stringProp name="HTTPSampler.protocol"></stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">${SubPath}</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">Content-Type</stringProp>
                  <stringProp name="Header.value">application/xml</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
          </hashTree>
        </hashTree>
        <IfController guiclass="IfControllerPanel" testclass="IfController" testname="Else" enabled="true">
          <stringProp name="IfController.condition">${chd_number}==0</stringProp>
          <boolProp name="IfController.evaluateAll">false</boolProp>
        </IfController>
        <hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="AirShoppingRQ One Way No CHD" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;&#xd;
&lt;AirShoppingRQ EchoToken=&quot;${cntr}-${origin}-${destination}-${adt_number}ADT-${numberOfONDs}OND&quot; TimeStamp=&quot;2016-03-31T00:00:00.000+03:00&quot; Version=&quot;IATA2016.2&quot;&#xd;
               TransactionIdentifier=&quot;TRN12345&quot; Target=&quot;Test&quot; xmlns=&quot;http://www.iata.org/IATA/EDIST&quot;&gt;&#xd;
	&lt;PointOfSale&gt;&#xd;
		&lt;Location&gt;&#xd;
			&lt;CountryCode&gt;US&lt;/CountryCode&gt;&#xd;
			&lt;CityCode&gt;WAS&lt;/CityCode&gt;&#xd;
		&lt;/Location&gt;&#xd;
		&lt;TouchPoint&gt;&#xd;
			&lt;Device&gt;&#xd;
				&lt;Code&gt;2&lt;/Code&gt;&#xd;
				&lt;Definition&gt;Web Browser&lt;/Definition&gt;&#xd;
				&lt;Position&gt;&#xd;
					&lt;Latitude&gt;38.89756&lt;/Latitude&gt;&#xd;
					&lt;Longitude&gt;-77.03650&lt;/Longitude&gt;&#xd;
					&lt;NAC&gt;8KD7V PGGM0&lt;/NAC&gt;&#xd;
				&lt;/Position&gt;&#xd;
			&lt;/Device&gt;&#xd;
			&lt;Event&gt;&#xd;
				&lt;Code&gt;9&lt;/Code&gt;&#xd;
				&lt;Definition&gt;Shop&lt;/Definition&gt;&#xd;
			&lt;/Event&gt;&#xd;
		&lt;/TouchPoint&gt;&#xd;
	&lt;/PointOfSale&gt;&#xd;
	&lt;Document&gt;&#xd;
		&lt;ReferenceVersion&gt;1.0&lt;/ReferenceVersion&gt;&#xd;
	&lt;/Document&gt;&#xd;
	&lt;Party&gt;&#xd;
		&lt;Sender&gt;&#xd;
			&lt;TravelAgencySender&gt;&#xd;
				&lt;Name&gt;JR TECHNOLOGIES&lt;/Name&gt;&#xd;
				&lt;IATA_Number&gt;20200154&lt;/IATA_Number&gt;&#xd;
				&lt;AgencyID&gt;00010080&lt;/AgencyID&gt;&#xd;
			&lt;/TravelAgencySender&gt;&#xd;
		&lt;/Sender&gt;&#xd;
	&lt;/Party&gt;&#xd;
	&lt;Travelers&gt;&#xd;
		&lt;Traveler&gt;&#xd;
			&lt;AnonymousTraveler&gt;&#xd;
				&lt;PTC Quantity=&quot;${adt_number}&quot;&gt;ADT&lt;/PTC&gt;&#xd;
			&lt;/AnonymousTraveler&gt;&#xd;
		&lt;/Traveler&gt;&#xd;
	&lt;/Travelers&gt;&#xd;
	&lt;CoreQuery&gt;&#xd;
		&lt;OriginDestinations&gt;&#xd;
			&lt;OriginDestination&gt;&#xd;
				&lt;Departure&gt;&#xd;
					&lt;AirportCode&gt;${origin}&lt;/AirportCode&gt;&#xd;
					&lt;Date&gt;${start}&lt;/Date&gt;&#xd;
				&lt;/Departure&gt;&#xd;
				&lt;Arrival&gt;&#xd;
					&lt;AirportCode&gt;${destination}&lt;/AirportCode&gt;&#xd;
				&lt;/Arrival&gt;&#xd;
				&lt;MarketingCarrierAirline&gt;&#xd;
					&lt;AirlineID&gt;NW&lt;/AirlineID&gt;&#xd;
					&lt;Name&gt;Northwest Airlines&lt;/Name&gt;&#xd;
				&lt;/MarketingCarrierAirline&gt;&#xd;
			&lt;/OriginDestination&gt;&#xd;
			${ondString}&#xd;
		&lt;/OriginDestinations&gt;&#xd;
	&lt;/CoreQuery&gt;&#xd;
&lt;Preference&gt;&#xd;
		&lt;CabinPreferences&gt;&#xd;
			&lt;CabinType&gt;&#xd;
				&lt;Code&gt;Economy&lt;/Code&gt;&#xd;
			&lt;/CabinType&gt;&#xd;
		&lt;/CabinPreferences&gt;&#xd;
	&lt;/Preference&gt;&#xd;
	&lt;Metadata&gt;&#xd;
		&lt;Other&gt;&#xd;
			&lt;OtherMetadata&gt;&#xd;
				&lt;CurrencyMetadatas&gt;&#xd;
					&lt;CurrencyMetadata MetadataKey=&quot;USD&quot;&gt;&#xd;
						&lt;Decimals&gt;2&lt;/Decimals&gt;&#xd;
					&lt;/CurrencyMetadata&gt;&#xd;
				&lt;/CurrencyMetadatas&gt;&#xd;
			&lt;/OtherMetadata&gt;&#xd;
			&lt;OtherMetadata&gt;&#xd;
				&lt;LanguageMetadatas&gt;&#xd;
					&lt;LanguageMetadata MetadataKey=&quot;Display&quot;&gt;&#xd;
						&lt;Application&gt;Display&lt;/Application&gt;&#xd;
						&lt;Code_ISO&gt;en&lt;/Code_ISO&gt;&#xd;
					&lt;/LanguageMetadata&gt;&#xd;
				&lt;/LanguageMetadatas&gt;&#xd;
			&lt;/OtherMetadata&gt;&#xd;
		&lt;/Other&gt;&#xd;
	&lt;/Metadata&gt;&#xd;
&lt;/AirShoppingRQ&gt;</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${IP}</stringProp>
            <stringProp name="HTTPSampler.port">${port}</stringProp>
            <stringProp name="HTTPSampler.protocol"></stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">${SubPath}</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
            <stringProp name="TestPlan.comments">// 
216.226.146.183</stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">Content-Type</stringProp>
                  <stringProp name="Header.value">application/xml</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
            <XPathExtractor guiclass="XPathExtractorGui" testclass="XPathExtractor" testname="getResponseID" enabled="true">
              <stringProp name="XPathExtractor.default">null</stringProp>
              <stringProp name="XPathExtractor.refname">getResponseID</stringProp>
              <stringProp name="XPathExtractor.matchNumber">-1</stringProp>
              <stringProp name="XPathExtractor.xpathQuery">/AirShoppingRS/ShoppingResponseID/ResponseID</stringProp>
              <boolProp name="XPathExtractor.validate">false</boolProp>
              <boolProp name="XPathExtractor.tolerant">false</boolProp>
              <boolProp name="XPathExtractor.namespace">false</boolProp>
            </XPathExtractor>
            <hashTree/>
            <XPathExtractor guiclass="XPathExtractorGui" testclass="XPathExtractor" testname="getFlightNumber" enabled="true">
              <stringProp name="XPathExtractor.default">null</stringProp>
              <stringProp name="XPathExtractor.refname">getFlightNumber</stringProp>
              <stringProp name="XPathExtractor.matchNumber">-1</stringProp>
              <stringProp name="XPathExtractor.xpathQuery">/AirShoppingRS/DataLists/FlightSegmentList/FlightSegment[1]/OperatingCarrier/FlightNumber</stringProp>
              <boolProp name="XPathExtractor.validate">false</boolProp>
              <boolProp name="XPathExtractor.tolerant">false</boolProp>
              <boolProp name="XPathExtractor.namespace">false</boolProp>
            </XPathExtractor>
            <hashTree/>
            <XPathExtractor guiclass="XPathExtractorGui" testclass="XPathExtractor" testname="getAircraftCode" enabled="true">
              <stringProp name="XPathExtractor.default">null</stringProp>
              <stringProp name="XPathExtractor.refname">getAircraftCode</stringProp>
              <stringProp name="XPathExtractor.matchNumber">-1</stringProp>
              <stringProp name="XPathExtractor.xpathQuery">/AirShoppingRS/DataLists/FlightSegmentList/FlightSegment[1]/Equipment/AircraftCode</stringProp>
              <boolProp name="XPathExtractor.validate">false</boolProp>
              <boolProp name="XPathExtractor.tolerant">false</boolProp>
              <boolProp name="XPathExtractor.namespace">false</boolProp>
            </XPathExtractor>
            <hashTree/>
            <XPathExtractor guiclass="XPathExtractorGui" testclass="XPathExtractor" testname="getClassOfService" enabled="true">
              <stringProp name="XPathExtractor.default">null</stringProp>
              <stringProp name="XPathExtractor.refname">getClassOfService</stringProp>
              <stringProp name="XPathExtractor.matchNumber">-1</stringProp>
              <stringProp name="XPathExtractor.xpathQuery">/AirShoppingRS/DataLists/FlightSegmentList/FlightSegment[1]/ClassOfService/Code</stringProp>
              <boolProp name="XPathExtractor.validate">false</boolProp>
              <boolProp name="XPathExtractor.tolerant">false</boolProp>
              <boolProp name="XPathExtractor.namespace">false</boolProp>
            </XPathExtractor>
            <hashTree/>
            <XPathExtractor guiclass="XPathExtractorGui" testclass="XPathExtractor" testname="getPriceGuaranteeTimeLimit" enabled="true">
              <stringProp name="XPathExtractor.default">null</stringProp>
              <stringProp name="XPathExtractor.refname">getPriceGuaranteeTimeLimit</stringProp>
              <stringProp name="XPathExtractor.matchNumber">-1</stringProp>
              <stringProp name="XPathExtractor.xpathQuery">/AirShoppingRS/OffersGroup/AirlineOffers/AirlineOffer/TimeLimits/OtherLimits/OtherLimit/PriceGuaranteeTimeLimit/@Timestamp</stringProp>
              <boolProp name="XPathExtractor.validate">false</boolProp>
              <boolProp name="XPathExtractor.tolerant">false</boolProp>
              <boolProp name="XPathExtractor.namespace">false</boolProp>
            </XPathExtractor>
            <hashTree/>
            <XPathExtractor guiclass="XPathExtractorGui" testclass="XPathExtractor" testname="getTicketBy" enabled="true">
              <stringProp name="XPathExtractor.default">null</stringProp>
              <stringProp name="XPathExtractor.refname">getTicketBy</stringProp>
              <stringProp name="XPathExtractor.matchNumber">-1</stringProp>
              <stringProp name="XPathExtractor.xpathQuery">/AirShoppingRS/OffersGroup/AirlineOffers/AirlineOffer/TimeLimits/OtherLimits/OtherLimit/TicketByTimeLimit/TicketBy</stringProp>
              <boolProp name="XPathExtractor.validate">false</boolProp>
              <boolProp name="XPathExtractor.tolerant">false</boolProp>
              <boolProp name="XPathExtractor.namespace">false</boolProp>
            </XPathExtractor>
            <hashTree/>
            <XPathExtractor guiclass="XPathExtractorGui" testclass="XPathExtractor" testname="getDepartureDateSEG1" enabled="true">
              <stringProp name="XPathExtractor.default">null</stringProp>
              <stringProp name="XPathExtractor.refname">getDepartureDateSEG1</stringProp>
              <stringProp name="XPathExtractor.matchNumber">-1</stringProp>
              <stringProp name="XPathExtractor.xpathQuery">/AirShoppingRS/DataLists/FlightSegmentList/FlightSegment[@SegmentKey=&apos;SEG1&apos;]/Departure/Date</stringProp>
              <boolProp name="XPathExtractor.validate">false</boolProp>
              <boolProp name="XPathExtractor.tolerant">false</boolProp>
              <boolProp name="XPathExtractor.namespace">false</boolProp>
            </XPathExtractor>
            <hashTree/>
            <XPathExtractor guiclass="XPathExtractorGui" testclass="XPathExtractor" testname="getDepartureTimeSEG1" enabled="true">
              <stringProp name="XPathExtractor.default">null</stringProp>
              <stringProp name="XPathExtractor.refname">getDepartureTimeSEG1</stringProp>
              <stringProp name="XPathExtractor.matchNumber">-1</stringProp>
              <stringProp name="XPathExtractor.xpathQuery">/AirShoppingRS/DataLists/FlightSegmentList/FlightSegment[@SegmentKey=&apos;SEG1&apos;]/Departure/Time</stringProp>
              <boolProp name="XPathExtractor.validate">false</boolProp>
              <boolProp name="XPathExtractor.tolerant">false</boolProp>
              <boolProp name="XPathExtractor.namespace">false</boolProp>
            </XPathExtractor>
            <hashTree/>
            <XPathExtractor guiclass="XPathExtractorGui" testclass="XPathExtractor" testname="getArrivalDateSEG1" enabled="true">
              <stringProp name="XPathExtractor.default">null</stringProp>
              <stringProp name="XPathExtractor.refname">getArrivalDateSEG1</stringProp>
              <stringProp name="XPathExtractor.matchNumber">-1</stringProp>
              <stringProp name="XPathExtractor.xpathQuery">/AirShoppingRS/DataLists/FlightSegmentList/FlightSegment[@SegmentKey=&apos;SEG1&apos;]/Arrival/Date</stringProp>
              <boolProp name="XPathExtractor.validate">false</boolProp>
              <boolProp name="XPathExtractor.tolerant">false</boolProp>
              <boolProp name="XPathExtractor.namespace">false</boolProp>
            </XPathExtractor>
            <hashTree/>
            <XPathExtractor guiclass="XPathExtractorGui" testclass="XPathExtractor" testname="getBaseAmountSEG1ADT1" enabled="true">
              <stringProp name="XPathExtractor.default">0</stringProp>
              <stringProp name="XPathExtractor.refname">getBaseAmountSEG1ADT1</stringProp>
              <stringProp name="XPathExtractor.matchNumber">-1</stringProp>
              <stringProp name="XPathExtractor.xpathQuery">/AirShoppingRS/OffersGroup/AirlineOffers/AirlineOffer[1]/PricedOffer/OfferPrice[1]/FareDetail/FareComponent[1]/PriceBreakdown/Price/BaseAmount</stringProp>
              <boolProp name="XPathExtractor.validate">false</boolProp>
              <boolProp name="XPathExtractor.tolerant">false</boolProp>
              <boolProp name="XPathExtractor.namespace">false</boolProp>
            </XPathExtractor>
            <hashTree/>
            <XPathExtractor guiclass="XPathExtractorGui" testclass="XPathExtractor" testname="getRemarksSEG1ADT1" enabled="true">
              <stringProp name="XPathExtractor.default">null</stringProp>
              <stringProp name="XPathExtractor.refname">getRemarksSEG1ADT1</stringProp>
              <stringProp name="XPathExtractor.matchNumber">-1</stringProp>
              <stringProp name="XPathExtractor.xpathQuery">/AirShoppingRS/OffersGroup/AirlineOffers/AirlineOffer[1]/PricedOffer/OfferPrice[1]/FareDetail/Remarks/Remark</stringProp>
              <boolProp name="XPathExtractor.validate">false</boolProp>
              <boolProp name="XPathExtractor.tolerant">false</boolProp>
              <boolProp name="XPathExtractor.namespace">false</boolProp>
            </XPathExtractor>
            <hashTree/>
            <XPathExtractor guiclass="XPathExtractorGui" testclass="XPathExtractor" testname="getFareBasisCodeSEG1ADT1" enabled="true">
              <stringProp name="XPathExtractor.default">0</stringProp>
              <stringProp name="XPathExtractor.refname">getFareBasisCodeSEG1ADT1</stringProp>
              <stringProp name="XPathExtractor.matchNumber">-1</stringProp>
              <stringProp name="XPathExtractor.xpathQuery">/AirShoppingRS/OffersGroup/AirlineOffers/AirlineOffer[1]/PricedOffer/OfferPrice[1]/FareDetail/FareComponent[1]/FareBasis/FareBasisCode/Code</stringProp>
              <boolProp name="XPathExtractor.validate">false</boolProp>
              <boolProp name="XPathExtractor.tolerant">false</boolProp>
              <boolProp name="XPathExtractor.namespace">false</boolProp>
            </XPathExtractor>
            <hashTree/>
            <XPathExtractor guiclass="XPathExtractorGui" testclass="XPathExtractor" testname="getTaxAmountSEG1ADT1" enabled="true">
              <stringProp name="XPathExtractor.default">0</stringProp>
              <stringProp name="XPathExtractor.refname">getTaxAmountSEG1ADT1</stringProp>
              <stringProp name="XPathExtractor.matchNumber">-1</stringProp>
              <stringProp name="XPathExtractor.xpathQuery">/AirShoppingRS/OffersGroup/AirlineOffers/AirlineOffer[1]/PricedOffer/OfferPrice[1]/FareDetail/FareComponent[1]/PriceBreakdown/Price/Taxes/Total</stringProp>
              <boolProp name="XPathExtractor.validate">false</boolProp>
              <boolProp name="XPathExtractor.tolerant">false</boolProp>
              <boolProp name="XPathExtractor.namespace">false</boolProp>
            </XPathExtractor>
            <hashTree/>
            <XPathExtractor guiclass="XPathExtractorGui" testclass="XPathExtractor" testname="getPayment" enabled="true">
              <stringProp name="XPathExtractor.default">0</stringProp>
              <stringProp name="XPathExtractor.refname">getPayment</stringProp>
              <stringProp name="XPathExtractor.matchNumber">-1</stringProp>
              <stringProp name="XPathExtractor.xpathQuery">sum(/AirShoppingRS/OffersGroup/AirlineOffers/AirlineOffer[1]/PricedOffer/OfferPrice[.]/FareDetail/FareComponent[.]/PriceBreakdown/Price/Taxes/Total | /AirShoppingRS/OffersGroup/AirlineOffers/AirlineOffer[1]/PricedOffer/OfferPrice[.]/FareDetail/FareComponent[.]/PriceBreakdown/Price/BaseAmount) + 25* (${adt_number} + ${chd_number}) </stringProp>
              <boolProp name="XPathExtractor.validate">false</boolProp>
              <boolProp name="XPathExtractor.tolerant">false</boolProp>
              <boolProp name="XPathExtractor.namespace">false</boolProp>
              <stringProp name="TestPlan.comments">${__doubleSum(${getBaseAmountSEG1ADT1}, ${getTaxAmountSEG1ADT1})}</stringProp>
            </XPathExtractor>
            <hashTree/>
          </hashTree>
          <TestAction guiclass="TestActionGui" testclass="TestAction" testname="Delay" enabled="true">
            <intProp name="ActionProcessor.action">1</intProp>
            <intProp name="ActionProcessor.target">0</intProp>
            <stringProp name="ActionProcessor.duration">3000 * ${delayForThreads}</stringProp>
          </TestAction>
          <hashTree/>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="OrderCreateRQ One Way 1 ADT" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot; standalone=&quot;yes&quot;?&gt;&#xd;
&lt;edis:OrderCreateRQ EchoToken=&quot;${cntr}-${origin}-${destination}-${adt_number}ADT-${chd_number}CHD-${numberOfONDs}OND&quot; TimeStamp=&quot;2016-03-31T00:00:00.000+03:00&quot; Version=&quot;IATA2016.2&quot; xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot; &#xd;
xmlns=&quot;http://www.iata.org/IATA/EDIST&quot; xmlns:edis=&quot;http://www.iata.org/IATA/EDIST&quot;&gt;&#xd;
	&lt;PointOfSale&gt;&#xd;
		&lt;Location&gt;&#xd;
			&lt;CountryCode&gt;US&lt;/CountryCode&gt;&#xd;
			&lt;CityCode&gt;MSP&lt;/CityCode&gt;&#xd;
		&lt;/Location&gt;&#xd;
		&lt;RequestTime Zone=&quot;EST&quot;&gt;2017-05-24T07:45:00+07:45&lt;/RequestTime&gt;&#xd;
		&lt;TouchPoint&gt;&#xd;
			&lt;Device&gt;&#xd;
				&lt;Code&gt;2&lt;/Code&gt;&#xd;
				&lt;Definition&gt;Web Browser&lt;/Definition&gt;&#xd;
				&lt;Position&gt;&#xd;
					&lt;Latitude&gt;38.89756&lt;/Latitude&gt;&#xd;
					&lt;Longitude&gt;-77.03650&lt;/Longitude&gt;&#xd;
					&lt;NAC&gt;8KD7V PGGM0&lt;/NAC&gt;&#xd;
				&lt;/Position&gt;&#xd;
			&lt;/Device&gt;&#xd;
			&lt;Event&gt;&#xd;
				&lt;Code&gt;1&lt;/Code&gt;&#xd;
				&lt;Definition&gt;Order or buy&lt;/Definition&gt;&#xd;
			&lt;/Event&gt;&#xd;
		&lt;/TouchPoint&gt;&#xd;
	&lt;/PointOfSale&gt;&#xd;
	&lt;Document&gt;&#xd;
		&lt;Name&gt;JRT UNISYS GATEWAY&lt;/Name&gt;&#xd;
		&lt;ReferenceVersion&gt;1.0&lt;/ReferenceVersion&gt;&#xd;
	&lt;/Document&gt;&#xd;
	&lt;Party&gt;&#xd;
		&lt;Sender&gt;&#xd;
			&lt;TravelAgencySender&gt;&#xd;
				&lt;Contacts&gt;&#xd;
					&lt;Contact&gt;&#xd;
						&lt;EmailContact&gt;&#xd;
							&lt;Address&gt;ndc@unisys.com&lt;/Address&gt;&#xd;
						&lt;/EmailContact&gt;&#xd;
					&lt;/Contact&gt;&#xd;
				&lt;/Contacts&gt;&#xd;
				&lt;PseudoCity&gt;A4A&lt;/PseudoCity&gt;&#xd;
				&lt;IATA_Number&gt;98417900&lt;/IATA_Number&gt;&#xd;
				&lt;AgencyID Owner=&quot;NW&quot;&gt;NW&lt;/AgencyID&gt;&#xd;
				&lt;AgentUser&gt;&#xd;
					&lt;Name&gt;ksmith&lt;/Name&gt;&#xd;
					&lt;AgentUserID&gt;ksmith212&lt;/AgentUserID&gt;&#xd;
					&lt;UserRole&gt;Admin&lt;/UserRole&gt;&#xd;
				&lt;/AgentUser&gt;&#xd;
			&lt;/TravelAgencySender&gt;&#xd;
		&lt;/Sender&gt;&#xd;
	&lt;/Party&gt;&#xd;
	&lt;Query&gt;&#xd;
		&lt;Passengers&gt;&#xd;
			&lt;Passenger ObjectKey=&quot;ADT1&quot;&gt;&#xd;
				&lt;PTC Quantity=&quot;1&quot;&gt;ADT&lt;/PTC&gt;&#xd;
				&lt;Age&gt;&#xd;
					&lt;BirthDate&gt;1980-03-06&lt;/BirthDate&gt;&#xd;
				&lt;/Age&gt;&#xd;
				&lt;Name&gt;&#xd;
					&lt;Surname&gt;Jaffa&lt;/Surname&gt;&#xd;
					&lt;Given&gt;Eric&lt;/Given&gt;&#xd;
					&lt;Middle&gt;Edward&lt;/Middle&gt;&#xd;
				&lt;/Name&gt;&#xd;
				&lt;Contacts&gt;&#xd;
					&lt;Contact&gt;&#xd;
						&lt;EmailContact&gt;&#xd;
							&lt;Address&gt;jaffa@unisys.com&lt;/Address&gt;&#xd;
						&lt;/EmailContact&gt;&#xd;
					&lt;/Contact&gt;&#xd;
				&lt;/Contacts&gt;&#xd;
				&lt;Gender&gt;Male&lt;/Gender&gt;&#xd;
			&lt;/Passenger&gt;&#xd;
		&lt;/Passengers&gt;&#xd;
		&lt;OrderItems&gt;&#xd;
			&lt;ShoppingResponse&gt;&#xd;
				&lt;Owner&gt;NW&lt;/Owner&gt;&#xd;
				&lt;ResponseID&gt;${getResponseID}&lt;/ResponseID&gt;&#xd;
				&lt;Offers&gt;&#xd;
					&lt;Offer&gt;&#xd;
						&lt;OfferID Owner=&quot;NW&quot;&gt;SOL1#OD1&lt;/OfferID&gt;&#xd;
						&lt;OfferItems&gt;&#xd;
							&lt;OfferItem&gt;&#xd;
								&lt;OfferItemID Owner=&quot;NW&quot;&gt;SOL1#OD1#ADT1&lt;/OfferItemID&gt;&#xd;
								&lt;Passengers&gt;&#xd;
									&lt;PassengerReference&gt;ADT1&lt;/PassengerReference&gt;&#xd;
								&lt;/Passengers&gt;&#xd;
								&lt;ApplicableFlight&gt;&#xd;
									&lt;OriginDestinationReferences&gt;OD1&lt;/OriginDestinationReferences&gt;&#xd;
								&lt;/ApplicableFlight&gt;&#xd;
								&lt;AssociatedServices&gt;&#xd;
									&lt;AssociatedService refs=&quot;SV9&quot;&gt;&#xd;
										&lt;ServiceID Owner=&quot;NW&quot;&gt;SV9&lt;/ServiceID&gt;&#xd;
									&lt;/AssociatedService&gt;&#xd;
									&lt;AssociatedService refs=&quot;SV2&quot;&gt;&#xd;
										&lt;ServiceID Owner=&quot;NW&quot;&gt;SV2&lt;/ServiceID&gt;&#xd;
									&lt;/AssociatedService&gt;&#xd;
								&lt;/AssociatedServices&gt;&#xd;
							&lt;/OfferItem&gt;&#xd;
						&lt;/OfferItems&gt;&#xd;
					&lt;/Offer&gt;&#xd;
				&lt;/Offers&gt;&#xd;
			&lt;/ShoppingResponse&gt;&#xd;
			&lt;OfferItem&gt;&#xd;
				&lt;OfferItemID Owner=&quot;NW&quot;&gt;SOL1#OD1#ADT1&lt;/OfferItemID&gt;&#xd;
				&lt;OfferItemType&gt;&#xd;
					&lt;DetailedFlightItem&gt;&#xd;
						&lt;OriginDestination&gt;&#xd;
							&lt;Flight&gt;&#xd;
								&lt;Departure&gt;&#xd;
									&lt;AirportCode&gt;${origin}&lt;/AirportCode&gt;&#xd;
									&lt;Date&gt;${getDepartureDateSEG1}&lt;/Date&gt;&#xd;
									&lt;Time&gt;${getDepartureTimeSEG1}&lt;/Time&gt;&#xd;
								&lt;/Departure&gt;&#xd;
								&lt;Arrival&gt;&#xd;
									&lt;AirportCode&gt;${destination}&lt;/AirportCode&gt;&#xd;
									&lt;Date&gt;${getArrivalDateSEG1}&lt;/Date&gt;&#xd;
								&lt;/Arrival&gt;&#xd;
								&lt;MarketingCarrier&gt;&#xd;
									&lt;AirlineID&gt;NW&lt;/AirlineID&gt;&#xd;
									&lt;FlightNumber&gt;${getFlightNumber}&lt;/FlightNumber&gt;&#xd;
								&lt;/MarketingCarrier&gt;&#xd;
								&lt;OperatingCarrier&gt;&#xd;
									&lt;AirlineID&gt;NW&lt;/AirlineID&gt;&#xd;
									&lt;FlightNumber&gt;${getFlightNumber}&lt;/FlightNumber&gt;&#xd;
								&lt;/OperatingCarrier&gt;&#xd;
							&lt;/Flight&gt;&#xd;
						&lt;/OriginDestination&gt;&#xd;
						&lt;FareDetail&gt;&#xd;
							&lt;FareComponent&gt;&#xd;
								&lt;SegmentReference&gt;SEG1&lt;/SegmentReference&gt;&#xd;
								&lt;PriceBreakdown&gt;&#xd;
									&lt;Price&gt;&#xd;
										&lt;BaseAmount Code=&quot;USD&quot;&gt;${getBaseAmountSEG1ADT1}&lt;/BaseAmount&gt;&#xd;
										&lt;Taxes&gt;&#xd;
											&lt;Total Code=&quot;USD&quot;&gt;${getTaxAmountSEG1ADT1}&lt;/Total&gt;&#xd;
										&lt;/Taxes&gt;&#xd;
									&lt;/Price&gt;&#xd;
								&lt;/PriceBreakdown&gt;&#xd;
								&lt;FareBasis&gt;&#xd;
									&lt;FareBasisCode&gt;&#xd;
										&lt;Code&gt;${getFareBasisCodeSEG1ADT1}&lt;/Code&gt;&#xd;
									&lt;/FareBasisCode&gt;&#xd;
									&lt;RBD&gt;Y&lt;/RBD&gt;&#xd;
								&lt;/FareBasis&gt;&#xd;
								&lt;FareRules&gt;&#xd;
									&lt;Remarks&gt;&#xd;
										&lt;Remark&gt;${getRemarksSEG1ADT1}&lt;/Remark&gt;&#xd;
									&lt;/Remarks&gt;&#xd;
								&lt;/FareRules&gt;&#xd;
							&lt;/FareComponent&gt;&#xd;
						&lt;/FareDetail&gt;&#xd;
					&lt;/DetailedFlightItem&gt;&#xd;
				&lt;/OfferItemType&gt;&#xd;
				&lt;TimeLimits&gt;&#xd;
					&lt;TimeLimit&gt;&#xd;
						&lt;PriceGuaranteeTimeLimit Timestamp=&quot;${getPriceGuaranteeTimeLimit}&quot;/&gt;&#xd;
						&lt;TicketByTimeLimit&gt;&#xd;
							&lt;TicketBy&gt;${getTicketBy}&lt;/TicketBy&gt;&#xd;
						&lt;/TicketByTimeLimit&gt;&#xd;
					&lt;/TimeLimit&gt;&#xd;
				&lt;/TimeLimits&gt;&#xd;
			&lt;/OfferItem&gt;&#xd;
		&lt;/OrderItems&gt;&#xd;
		&lt;Payments&gt;&#xd;
			&lt;Payment&gt;&#xd;
				&lt;Method&gt;&#xd;
					&lt;PaymentCard&gt;&#xd;
						&lt;CardType&gt;Visa&lt;/CardType&gt;&#xd;
						&lt;CardCode&gt;VI&lt;/CardCode&gt;&#xd;
						&lt;CardNumber&gt;4111111111111111&lt;/CardNumber&gt;&#xd;
						&lt;SeriesCode&gt;584&lt;/SeriesCode&gt;&#xd;
						&lt;EffectiveExpireDate&gt;&#xd;
							&lt;Expiration&gt;1217&lt;/Expiration&gt;&#xd;
						&lt;/EffectiveExpireDate&gt;&#xd;
					&lt;/PaymentCard&gt;&#xd;
				&lt;/Method&gt;&#xd;
				&lt;Amount Code=&quot;USD&quot; Taxable=&quot;true&quot;&gt;${getPayment}&lt;/Amount&gt;&#xd;
				&lt;Payer&gt;&#xd;
					&lt;Name&gt;&#xd;
						&lt;Surname&gt;Kumar&lt;/Surname&gt;&#xd;
						&lt;Given&gt;Mithalesh&lt;/Given&gt;&#xd;
					&lt;/Name&gt;&#xd;
					&lt;Contacts&gt;&#xd;
						&lt;Contact&gt;&#xd;
							&lt;AddressContact&gt;&#xd;
								&lt;Street&gt;22 Main Street&lt;/Street&gt;&#xd;
								&lt;CityName&gt;FRA&lt;/CityName&gt;&#xd;
								&lt;PostalCode&gt;14201&lt;/PostalCode&gt;&#xd;
								&lt;CountryCode&gt;DE&lt;/CountryCode&gt;&#xd;
							&lt;/AddressContact&gt;&#xd;
							&lt;EmailContact&gt;&#xd;
								&lt;Address&gt;ramesh@unisys.com&lt;/Address&gt;&#xd;
							&lt;/EmailContact&gt;&#xd;
						&lt;/Contact&gt;&#xd;
					&lt;/Contacts&gt;&#xd;
				&lt;/Payer&gt;&#xd;
			&lt;/Payment&gt;&#xd;
		&lt;/Payments&gt;&#xd;
		&lt;DataLists&gt;&#xd;
			&lt;edis:CarryOnAllowanceList&gt;&#xd;
				&lt;edis:CarryOnAllowance ListKey=&quot;AW1&quot;&gt;&#xd;
					&lt;edis:DimensionAllowance&gt;&#xd;
						&lt;edis:DimensionUOM&gt;Inch&lt;/edis:DimensionUOM&gt;&#xd;
						&lt;edis:Dimensions&gt;&#xd;
							&lt;edis:Category&gt;L&lt;/edis:Category&gt;&#xd;
							&lt;edis:MaxValue&gt;30&lt;/edis:MaxValue&gt;&#xd;
						&lt;/edis:Dimensions&gt;&#xd;
						&lt;edis:Dimensions&gt;&#xd;
							&lt;edis:Category&gt;W&lt;/edis:Category&gt;&#xd;
							&lt;edis:MaxValue&gt;30&lt;/edis:MaxValue&gt;&#xd;
						&lt;/edis:Dimensions&gt;&#xd;
						&lt;edis:Dimensions&gt;&#xd;
							&lt;edis:Category&gt;H&lt;/edis:Category&gt;&#xd;
							&lt;edis:MaxValue&gt;30&lt;/edis:MaxValue&gt;&#xd;
						&lt;/edis:Dimensions&gt;&#xd;
					&lt;/edis:DimensionAllowance&gt;&#xd;
					&lt;edis:WeightAllowance&gt;&#xd;
						&lt;edis:MaximumWeight&gt;&#xd;
							&lt;edis:Value&gt;5&lt;/edis:Value&gt;&#xd;
							&lt;edis:UOM&gt;Kilogram&lt;/edis:UOM&gt;&#xd;
						&lt;/edis:MaximumWeight&gt;&#xd;
					&lt;/edis:WeightAllowance&gt;&#xd;
				&lt;/edis:CarryOnAllowance&gt;&#xd;
			&lt;/edis:CarryOnAllowanceList&gt;&#xd;
			&lt;edis:CheckedBagAllowanceList&gt;&#xd;
				&lt;edis:CheckedBagAllowance ListKey=&quot;AW2&quot;&gt;&#xd;
					&lt;edis:DimensionAllowance&gt;&#xd;
						&lt;edis:DimensionUOM&gt;Inch&lt;/edis:DimensionUOM&gt;&#xd;
						&lt;edis:Dimensions&gt;&#xd;
							&lt;edis:Category&gt;L&lt;/edis:Category&gt;&#xd;
							&lt;edis:MaxValue&gt;15&lt;/edis:MaxValue&gt;&#xd;
						&lt;/edis:Dimensions&gt;&#xd;
						&lt;edis:Dimensions&gt;&#xd;
							&lt;edis:Category&gt;W&lt;/edis:Category&gt;&#xd;
							&lt;edis:MaxValue&gt;16&lt;/edis:MaxValue&gt;&#xd;
						&lt;/edis:Dimensions&gt;&#xd;
						&lt;edis:Dimensions&gt;&#xd;
							&lt;edis:Category&gt;H&lt;/edis:Category&gt;&#xd;
							&lt;edis:MaxValue&gt;17&lt;/edis:MaxValue&gt;&#xd;
						&lt;/edis:Dimensions&gt;&#xd;
					&lt;/edis:DimensionAllowance&gt;&#xd;
					&lt;edis:WeightAllowance&gt;&#xd;
						&lt;edis:MaximumWeight&gt;&#xd;
							&lt;edis:Value&gt;10&lt;/edis:Value&gt;&#xd;
							&lt;edis:UOM&gt;Kilogram&lt;/edis:UOM&gt;&#xd;
						&lt;/edis:MaximumWeight&gt;&#xd;
					&lt;/edis:WeightAllowance&gt;&#xd;
				&lt;/edis:CheckedBagAllowance&gt;&#xd;
			&lt;/edis:CheckedBagAllowanceList&gt;&#xd;
			&lt;FlightSegmentList&gt;&#xd;
				&lt;FlightSegment SegmentKey=&quot;SEG1&quot;&gt;&#xd;
					&lt;Departure&gt;&#xd;
						&lt;AirportCode&gt;${origin}&lt;/AirportCode&gt;&#xd;
						&lt;Date&gt;${getDepartureDateSEG1}&lt;/Date&gt;&#xd;
						&lt;Time&gt;${getDepartureTimeSEG1}&lt;/Time&gt;&#xd;
					&lt;/Departure&gt;&#xd;
					&lt;Arrival&gt;&#xd;
						&lt;AirportCode&gt;${destination}&lt;/AirportCode&gt;&#xd;
						&lt;Date&gt;${getArrivalDateSEG1}&lt;/Date&gt;&#xd;
					&lt;/Arrival&gt;&#xd;
					&lt;MarketingCarrier&gt;&#xd;
						&lt;AirlineID&gt;NW&lt;/AirlineID&gt;&#xd;
						&lt;FlightNumber&gt;${getFlightNumber}&lt;/FlightNumber&gt;&#xd;
					&lt;/MarketingCarrier&gt;&#xd;
					&lt;OperatingCarrier&gt;&#xd;
						&lt;AirlineID&gt;NW&lt;/AirlineID&gt;&#xd;
						&lt;FlightNumber&gt;${getFlightNumber}&lt;/FlightNumber&gt;&#xd;
					&lt;/OperatingCarrier&gt;&#xd;
					&lt;Equipment&gt;&#xd;
						&lt;AircraftCode&gt;${getAircraftCode}&lt;/AircraftCode&gt;&#xd;
					&lt;/Equipment&gt;&#xd;
					&lt;ClassOfService&gt;&#xd;
						&lt;Code&gt;${getClassOfService}&lt;/Code&gt;&#xd;
						&lt;MarketingName&gt;Economy&lt;/MarketingName&gt;&#xd;
					&lt;/ClassOfService&gt;&#xd;
					&lt;FlightDetail&gt;&#xd;
						&lt;FlightDuration&gt;&#xd;
							&lt;Value&gt;PT5H0M&lt;/Value&gt;&#xd;
						&lt;/FlightDuration&gt;&#xd;
					&lt;/FlightDetail&gt;&#xd;
				&lt;/FlightSegment&gt;&#xd;
			&lt;/FlightSegmentList&gt;&#xd;
			&lt;FlightList&gt;&#xd;
				&lt;Flight FlightKey=&quot;FL1&quot;&gt;&#xd;
					&lt;Journey&gt;&#xd;
						&lt;Time&gt;PT16H10M&lt;/Time&gt;&#xd;
					&lt;/Journey&gt;&#xd;
					&lt;SegmentReferences&gt;SEG1&lt;/SegmentReferences&gt;&#xd;
				&lt;/Flight&gt;&#xd;
			&lt;/FlightList&gt;&#xd;
			&lt;OriginDestinationList&gt;&#xd;
				&lt;OriginDestination OriginDestinationKey=&quot;OD1&quot;&gt;&#xd;
					&lt;DepartureCode&gt;${origin}&lt;/DepartureCode&gt;&#xd;
					&lt;ArrivalCode&gt;${destination}&lt;/ArrivalCode&gt;&#xd;
					&lt;FlightReferences&gt;FL1&lt;/FlightReferences&gt;&#xd;
				&lt;/OriginDestination&gt;&#xd;
			&lt;/OriginDestinationList&gt;&#xd;
			&lt;ServiceList&gt;&#xd;
				&lt;Service ObjectKey=&quot;SV2&quot;&gt;&#xd;
					&lt;ServiceID Owner=&quot;NW&quot;&gt;50&lt;/ServiceID&gt;&#xd;
					&lt;Name&gt;Veg Meal&lt;/Name&gt;&#xd;
					&lt;Encoding&gt;&#xd;
						&lt;RFIC&gt;&#xd;
							&lt;Code&gt;G&lt;/Code&gt;&#xd;
						&lt;/RFIC&gt;&#xd;
						&lt;SubCode&gt;0AP&lt;/SubCode&gt;&#xd;
					&lt;/Encoding&gt;&#xd;
					&lt;Descriptions&gt;&#xd;
						&lt;Description&gt;&#xd;
							&lt;Text&gt;Veg Meal&lt;/Text&gt;&#xd;
						&lt;/Description&gt;&#xd;
					&lt;/Descriptions&gt;&#xd;
					&lt;Price&gt;&#xd;
						&lt;Total Code=&quot;USD&quot;&gt;0.00&lt;/Total&gt;&#xd;
						&lt;PassengerReferences&gt;ADT1&lt;/PassengerReferences&gt;&#xd;
					&lt;/Price&gt;&#xd;
					&lt;BookingInstructions&gt;&#xd;
						&lt;SSRCode&gt;OTHS&lt;/SSRCode&gt;&#xd;
					&lt;/BookingInstructions&gt;&#xd;
					&lt;Associations&gt;&#xd;
						&lt;Flight&gt;&#xd;
							&lt;SegmentReferences&gt;SEG1&lt;/SegmentReferences&gt;&#xd;
						&lt;/Flight&gt;&#xd;
					&lt;/Associations&gt;&#xd;
				&lt;/Service&gt;&#xd;
				&lt;Service ObjectKey=&quot;SV9&quot;&gt;&#xd;
					&lt;ServiceID Owner=&quot;NW&quot;&gt;1026&lt;/ServiceID&gt;&#xd;
					&lt;Name&gt;Excess Baggage&lt;/Name&gt;&#xd;
					&lt;Encoding&gt;&#xd;
						&lt;RFIC&gt;&#xd;
							&lt;Code&gt;C&lt;/Code&gt;&#xd;
						&lt;/RFIC&gt;&#xd;
						&lt;SubCode&gt;0CC&lt;/SubCode&gt;&#xd;
					&lt;/Encoding&gt;&#xd;
					&lt;Descriptions&gt;&#xd;
						&lt;Description&gt;&#xd;
							&lt;Text&gt;EXCESS BAGGAGE&lt;/Text&gt;&#xd;
						&lt;/Description&gt;&#xd;
					&lt;/Descriptions&gt;&#xd;
					&lt;Price&gt;&#xd;
						&lt;Total Code=&quot;USD&quot;&gt;25.00&lt;/Total&gt;&#xd;
						&lt;PassengerReferences&gt;ADT1&lt;/PassengerReferences&gt;&#xd;
					&lt;/Price&gt;&#xd;
					&lt;BookingInstructions&gt;&#xd;
						&lt;SSRCode&gt;XBAG&lt;/SSRCode&gt;&#xd;
					&lt;/BookingInstructions&gt;&#xd;
					&lt;Associations&gt;&#xd;
						&lt;Flight&gt;&#xd;
							&lt;SegmentReferences&gt;SEG1&lt;/SegmentReferences&gt;&#xd;
						&lt;/Flight&gt;&#xd;
						&lt;OtherAssociations&gt;&#xd;
							&lt;OtherAssociation&gt;&#xd;
								&lt;Type&gt;CARRY&lt;/Type&gt;&#xd;
								&lt;ReferenceValue&gt;AW1&lt;/ReferenceValue&gt;&#xd;
							&lt;/OtherAssociation&gt;&#xd;
						&lt;/OtherAssociations&gt;&#xd;
					&lt;/Associations&gt;&#xd;
				&lt;/Service&gt;&#xd;
			&lt;/ServiceList&gt;&#xd;
		&lt;/DataLists&gt;&#xd;
	&lt;/Query&gt;&#xd;
&lt;/edis:OrderCreateRQ&gt;&#xd;
</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${IP}</stringProp>
            <stringProp name="HTTPSampler.port">${port}</stringProp>
            <stringProp name="HTTPSampler.protocol"></stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">${SubPath}</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">Content-Type</stringProp>
                  <stringProp name="Header.value">application/xml</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
          </hashTree>
        </hashTree>
        <XMLSchemaAssertion guiclass="XMLSchemaAssertionGUI" testclass="XMLSchemaAssertion" testname="XML Schema Assertion" enabled="false">
          <stringProp name="xmlschema_assertion_filename">C:\schemas\NDC\16.2\AirShoppingRS.xsd</stringProp>
        </XMLSchemaAssertion>
        <hashTree/>
        <TestAction guiclass="TestActionGui" testclass="TestAction" testname="Delay" enabled="true">
          <intProp name="ActionProcessor.action">1</intProp>
          <intProp name="ActionProcessor.target">0</intProp>
          <stringProp name="ActionProcessor.duration">1000 * ${delayForThreads}</stringProp>
        </TestAction>
        <hashTree/>
      </hashTree>
      <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="FLOW ROUNDTRIP MULTI PAX" enabled="true">
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
          <boolProp name="LoopController.continue_forever">false</boolProp>
          <stringProp name="LoopController.loops">${Loop}</stringProp>
        </elementProp>
        <stringProp name="ThreadGroup.num_threads">${Threads}</stringProp>
        <stringProp name="ThreadGroup.ramp_time">1</stringProp>
        <longProp name="ThreadGroup.start_time">1506082089000</longProp>
        <longProp name="ThreadGroup.end_time">1506082089000</longProp>
        <boolProp name="ThreadGroup.scheduler">false</boolProp>
        <stringProp name="ThreadGroup.duration"></stringProp>
        <stringProp name="ThreadGroup.delay">${delayForThreads}</stringProp>
      </ThreadGroup>
      <hashTree>
        <Arguments guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
          <collectionProp name="Arguments.arguments">
            <elementProp name="onds" elementType="Argument">
              <stringProp name="Argument.name">onds</stringProp>
              <stringProp name="Argument.value">MSP,ORD</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
              <stringProp name="Argument.desc">,MPN,ASI</stringProp>
            </elementProp>
            <elementProp name="year" elementType="Argument">
              <stringProp name="Argument.name">year</stringProp>
              <stringProp name="Argument.value">2017</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
          </collectionProp>
        </Arguments>
        <hashTree/>
        <RandomVariableConfig guiclass="TestBeanGUI" testclass="RandomVariableConfig" testname="adt_number" enabled="true">
          <stringProp name="maximumValue">1</stringProp>
          <stringProp name="minimumValue">1</stringProp>
          <stringProp name="outputFormat"></stringProp>
          <boolProp name="perThread">true</boolProp>
          <stringProp name="randomSeed"></stringProp>
          <stringProp name="variableName">adt_number</stringProp>
        </RandomVariableConfig>
        <hashTree/>
        <RandomVariableConfig guiclass="TestBeanGUI" testclass="RandomVariableConfig" testname="chd_number" enabled="true">
          <stringProp name="maximumValue">1</stringProp>
          <stringProp name="minimumValue">0</stringProp>
          <stringProp name="outputFormat"></stringProp>
          <boolProp name="perThread">true</boolProp>
          <stringProp name="randomSeed"></stringProp>
          <stringProp name="variableName">chd_number</stringProp>
        </RandomVariableConfig>
        <hashTree/>
        <BeanShellPreProcessor guiclass="TestBeanGUI" testclass="BeanShellPreProcessor" testname="destination generator" enabled="true">
          <stringProp name="filename"></stringProp>
          <stringProp name="parameters"></stringProp>
          <boolProp name="resetInterpreter">false</boolProp>
          <stringProp name="script">import java.util.Random;
import java.text.SimpleDateFormat;
import java.util.Calendar;


String[] categories = (vars.get(&quot;onds&quot;)).split(&quot;,&quot;);
int idx = new Random().nextInt(categories.length/2);
String origin = categories[idx*2];
vars.put(&quot;origin&quot;, origin);

int idx2 = idx * 2 + 1;
String destination = categories[idx2];
vars.put(&quot;destination&quot;, destination);

String ondString=&quot;&quot;;
String varNumOfOnds =&quot;&quot;;




int numOnd = new Random().nextInt(2);
varNumOfOnds = &quot;&quot;+(numOnd+1);


calendar = Calendar.getInstance();
calendar.set(2017, 12, 23);
endTime = calendar.getTimeInMillis();
formatter = new SimpleDateFormat(&quot;yyyy-MM-dd&quot;);
calendar.setTimeInMillis(endTime);



if(numOnd&gt;0){
	ondString=&quot;\t\t\t&lt;OriginDestination&gt;\n&lt;Departure&gt;\n&lt;AirportCode&gt;&quot; + destination +&quot;&lt;/AirportCode&gt;\n&lt;Date&gt;&quot;+ formatter.format(calendar.getTime()) +&quot;&lt;/Date&gt;\n&lt;/Departure&gt;\n&lt;Arrival&gt;\n&lt;AirportCode&gt;&quot;+origin +&quot;&lt;/AirportCode&gt;\n&lt;Date&gt;&quot;+formatter.format(calendar.getTime()) +&quot;&lt;/Date&gt;\n&lt;/Arrival&gt;\n&lt;MarketingCarrierAirline&gt;\n&lt;AirlineID&gt;NW&lt;/AirlineID&gt;\n&lt;Name&gt;UNISYS&lt;/Name&gt;\n&lt;/MarketingCarrierAirline&gt;\n&lt;/OriginDestination&gt;&quot;;
}


vars.put(&quot;numberOfONDs&quot;, varNumOfOnds);
vars.put(&quot;ondString&quot;, ondString);


/*
String[] categories = (vars.get(&quot;onds&quot;)).split(&quot;,&quot;);
int idx = new Random().nextInt(categories.length);
vars.put(&quot;origin&quot;, (categories[idx]));

int idx2 = new Random().nextInt(categories.length);
while(idx2==idx){
	idx2 = new Random().nextInt(categories.length);
}
vars.put(&quot;destination&quot;, (categories[idx2]));

*/






/*
int idx3 = new Random().nextInt(categories.length);
while(idx3==idx || idx3==idx2){
	idx3 = new Random().nextInt(categories.length);
}
vars.put(&quot;destination2&quot;, (categories[idx3]));

int idx4 = new Random().nextInt(categories.length);
while(idx4==idx || idx4==idx2 || idx4==idx3){
	idx4 = new Random().nextInt(categories.length);
}
vars.put(&quot;destination3&quot;, (categories[idx4]));
*/
</stringProp>
          <stringProp name="TestPlan.comments">//gets information from user defined values
//put a new variabel to the user defined variables</stringProp>
        </BeanShellPreProcessor>
        <hashTree/>
        <BeanShellPreProcessor guiclass="TestBeanGUI" testclass="BeanShellPreProcessor" testname="destination generator" enabled="false">
          <stringProp name="filename"></stringProp>
          <stringProp name="parameters"></stringProp>
          <boolProp name="resetInterpreter">false</boolProp>
          <stringProp name="script">import java.util.Random;


String[] categories = (vars.get(&quot;onds&quot;)).split(&quot;,&quot;);
int idx = new Random().nextInt(categories.length/2);
vars.put(&quot;origin&quot;, (categories[idx*2]));

vars.put(&quot;destination&quot;, (categories[idx*2+1]));

int numOfAdt = new Random().nextInt(3)+1;
int numOfChd = new Random().nextInt(3)+1;


/*
int idx2 = new Random().nextInt(categories.length);
while(idx2==idx){
	idx2 = new Random().nextInt(categories.length);
}
vars.put(&quot;destination&quot;, (categories[idx2]));
*/

/*
int idx3 = new Random().nextInt(categories.length);
while(idx3==idx || idx3==idx2){
	idx3 = new Random().nextInt(categories.length);
}
vars.put(&quot;destination2&quot;, (categories[idx3]));

int idx4 = new Random().nextInt(categories.length);
while(idx4==idx || idx4==idx2 || idx4==idx3){
	idx4 = new Random().nextInt(categories.length);
}
vars.put(&quot;destination3&quot;, (categories[idx4]));
*/
</stringProp>
          <stringProp name="TestPlan.comments">//gets information from user defined values
//put a new variabel to the user defined variables</stringProp>
        </BeanShellPreProcessor>
        <hashTree/>
        <BeanShellPreProcessor guiclass="TestBeanGUI" testclass="BeanShellPreProcessor" testname="RandomDate generator" enabled="false">
          <stringProp name="filename"></stringProp>
          <stringProp name="parameters"></stringProp>
          <boolProp name="resetInterpreter">true</boolProp>
          <stringProp name="script">import java.text.SimpleDateFormat;
import java.util.Calendar;

calendar = Calendar.getInstance();
calendar.set(2016, 9, 1);
startTime = calendar.getTimeInMillis();
calendar.set(2017, 01, 31);
endTime = calendar.getTimeInMillis();
randomTime1 = startTime + (long)(Math.random()*(endTime-startTime));
randomTime2 = randomTime1 + (long)(Math.random()*(endTime - randomTime1)+86400000);
randomTime3 = randomTime2 + (long)(Math.random()*(endTime - randomTime1)+86400000);

formatter = new SimpleDateFormat(&quot;yyyy-MM-dd&quot;);
calendar.setTimeInMillis(randomTime1);
vars.put(&quot;start&quot;, formatter.format(calendar.getTime()));
calendar.setTimeInMillis(randomTime2);
vars.put(&quot;end&quot;, formatter.format(calendar.getTime()));

calendar.setTimeInMillis(randomTime3);
vars.put(&quot;end2&quot;, formatter.format(calendar.getTime()));</stringProp>
        </BeanShellPreProcessor>
        <hashTree/>
        <IfController guiclass="IfControllerPanel" testclass="IfController" testname="If has Children" enabled="true">
          <stringProp name="IfController.condition">${chd_number}&gt;0</stringProp>
          <boolProp name="IfController.evaluateAll">false</boolProp>
        </IfController>
        <hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="AirShoppingRQ One Way With CHD" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;&#xd;
&lt;AirShoppingRQ EchoToken=&quot;${cntr}-${origin}-${destination}-${adt_number}ADT-${chd_number}CHD-${numberOfONDs}OND&quot; TimeStamp=&quot;2016-03-31T00:00:00.000+03:00&quot; Version=&quot;IATA2016.2&quot;&#xd;
               TransactionIdentifier=&quot;TRN12345&quot; Target=&quot;Test&quot; xmlns=&quot;http://www.iata.org/IATA/EDIST&quot;&gt;&#xd;
	&lt;PointOfSale&gt;&#xd;
		&lt;Location&gt;&#xd;
			&lt;CountryCode&gt;US&lt;/CountryCode&gt;&#xd;
			&lt;CityCode&gt;WAS&lt;/CityCode&gt;&#xd;
		&lt;/Location&gt;&#xd;
		&lt;TouchPoint&gt;&#xd;
			&lt;Device&gt;&#xd;
				&lt;Code&gt;2&lt;/Code&gt;&#xd;
				&lt;Definition&gt;Web Browser&lt;/Definition&gt;&#xd;
				&lt;Position&gt;&#xd;
					&lt;Latitude&gt;38.89756&lt;/Latitude&gt;&#xd;
					&lt;Longitude&gt;-77.03650&lt;/Longitude&gt;&#xd;
					&lt;NAC&gt;8KD7V PGGM0&lt;/NAC&gt;&#xd;
				&lt;/Position&gt;&#xd;
			&lt;/Device&gt;&#xd;
			&lt;Event&gt;&#xd;
				&lt;Code&gt;9&lt;/Code&gt;&#xd;
				&lt;Definition&gt;Shop&lt;/Definition&gt;&#xd;
			&lt;/Event&gt;&#xd;
		&lt;/TouchPoint&gt;&#xd;
	&lt;/PointOfSale&gt;&#xd;
	&lt;Document&gt;&#xd;
		&lt;ReferenceVersion&gt;1.0&lt;/ReferenceVersion&gt;&#xd;
	&lt;/Document&gt;&#xd;
	&lt;Party&gt;&#xd;
		&lt;Sender&gt;&#xd;
			&lt;TravelAgencySender&gt;&#xd;
				&lt;Name&gt;JR TECHNOLOGIES&lt;/Name&gt;&#xd;
				&lt;IATA_Number&gt;20200154&lt;/IATA_Number&gt;&#xd;
				&lt;AgencyID&gt;00010080&lt;/AgencyID&gt;&#xd;
			&lt;/TravelAgencySender&gt;&#xd;
		&lt;/Sender&gt;&#xd;
	&lt;/Party&gt;&#xd;
	&lt;Travelers&gt;&#xd;
		&lt;Traveler&gt;&#xd;
			&lt;AnonymousTraveler&gt;&#xd;
				&lt;PTC Quantity=&quot;${adt_number}&quot;&gt;ADT&lt;/PTC&gt;&#xd;
			&lt;/AnonymousTraveler&gt;&#xd;
			&lt;AnonymousTraveler&gt;&#xd;
				&lt;PTC Quantity=&quot;${chd_number}&quot;&gt;CHD&lt;/PTC&gt;&#xd;
			&lt;/AnonymousTraveler&gt;&#xd;
		&lt;/Traveler&gt;&#xd;
	&lt;/Travelers&gt;&#xd;
	&lt;CoreQuery&gt;&#xd;
		&lt;OriginDestinations&gt;&#xd;
			&lt;OriginDestination&gt;&#xd;
				&lt;Departure&gt;&#xd;
					&lt;AirportCode&gt;${origin}&lt;/AirportCode&gt;&#xd;
					&lt;Date&gt;${start}&lt;/Date&gt;&#xd;
				&lt;/Departure&gt;&#xd;
				&lt;Arrival&gt;&#xd;
					&lt;AirportCode&gt;${destination}&lt;/AirportCode&gt;&#xd;
				&lt;/Arrival&gt;&#xd;
				&lt;MarketingCarrierAirline&gt;&#xd;
					&lt;AirlineID&gt;NW&lt;/AirlineID&gt;&#xd;
					&lt;Name&gt;Northwest Airlines&lt;/Name&gt;&#xd;
				&lt;/MarketingCarrierAirline&gt;&#xd;
			&lt;/OriginDestination&gt;&#xd;
			${ondString}&#xd;
		&lt;/OriginDestinations&gt;&#xd;
	&lt;/CoreQuery&gt;&#xd;
		&lt;Preference&gt;&#xd;
		&lt;CabinPreferences&gt;&#xd;
			&lt;CabinType&gt;&#xd;
				&lt;Code&gt;Economy&lt;/Code&gt;&#xd;
			&lt;/CabinType&gt;&#xd;
		&lt;/CabinPreferences&gt;&#xd;
	&lt;/Preference&gt;&#xd;
	&lt;Metadata&gt;&#xd;
		&lt;Other&gt;&#xd;
			&lt;OtherMetadata&gt;&#xd;
				&lt;CurrencyMetadatas&gt;&#xd;
					&lt;CurrencyMetadata MetadataKey=&quot;USD&quot;&gt;&#xd;
						&lt;Decimals&gt;2&lt;/Decimals&gt;&#xd;
					&lt;/CurrencyMetadata&gt;&#xd;
				&lt;/CurrencyMetadatas&gt;&#xd;
			&lt;/OtherMetadata&gt;&#xd;
			&lt;OtherMetadata&gt;&#xd;
				&lt;LanguageMetadatas&gt;&#xd;
					&lt;LanguageMetadata MetadataKey=&quot;Display&quot;&gt;&#xd;
						&lt;Application&gt;Display&lt;/Application&gt;&#xd;
						&lt;Code_ISO&gt;en&lt;/Code_ISO&gt;&#xd;
					&lt;/LanguageMetadata&gt;&#xd;
				&lt;/LanguageMetadatas&gt;&#xd;
			&lt;/OtherMetadata&gt;&#xd;
		&lt;/Other&gt;&#xd;
	&lt;/Metadata&gt;&#xd;
&lt;/AirShoppingRQ&gt;</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${IP}</stringProp>
            <stringProp name="HTTPSampler.port">${port}</stringProp>
            <stringProp name="HTTPSampler.protocol"></stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">/ndcgateway</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">Content-Type</stringProp>
                  <stringProp name="Header.value">application/xml</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
            <XPathExtractor guiclass="XPathExtractorGui" testclass="XPathExtractor" testname="getResponseID" enabled="true">
              <stringProp name="XPathExtractor.default">null</stringProp>
              <stringProp name="XPathExtractor.refname">getResponseID</stringProp>
              <stringProp name="XPathExtractor.matchNumber">-1</stringProp>
              <stringProp name="XPathExtractor.xpathQuery">/AirShoppingRS/ShoppingResponseID/ResponseID</stringProp>
              <boolProp name="XPathExtractor.validate">false</boolProp>
              <boolProp name="XPathExtractor.tolerant">false</boolProp>
              <boolProp name="XPathExtractor.namespace">false</boolProp>
            </XPathExtractor>
            <hashTree/>
            <XPathExtractor guiclass="XPathExtractorGui" testclass="XPathExtractor" testname="getFlightNumber" enabled="true">
              <stringProp name="XPathExtractor.default">null</stringProp>
              <stringProp name="XPathExtractor.refname">getFlightNumber</stringProp>
              <stringProp name="XPathExtractor.matchNumber">-1</stringProp>
              <stringProp name="XPathExtractor.xpathQuery">/AirShoppingRS/DataLists/FlightSegmentList/FlightSegment[1]/OperatingCarrier/FlightNumber</stringProp>
              <boolProp name="XPathExtractor.validate">false</boolProp>
              <boolProp name="XPathExtractor.tolerant">false</boolProp>
              <boolProp name="XPathExtractor.namespace">false</boolProp>
            </XPathExtractor>
            <hashTree/>
            <XPathExtractor guiclass="XPathExtractorGui" testclass="XPathExtractor" testname="getAircraftCode" enabled="true">
              <stringProp name="XPathExtractor.default">null</stringProp>
              <stringProp name="XPathExtractor.refname">getAircraftCode</stringProp>
              <stringProp name="XPathExtractor.matchNumber">-1</stringProp>
              <stringProp name="XPathExtractor.xpathQuery">/AirShoppingRS/DataLists/FlightSegmentList/FlightSegment[1]/Equipment/AircraftCode</stringProp>
              <boolProp name="XPathExtractor.validate">false</boolProp>
              <boolProp name="XPathExtractor.tolerant">false</boolProp>
              <boolProp name="XPathExtractor.namespace">false</boolProp>
            </XPathExtractor>
            <hashTree/>
            <XPathExtractor guiclass="XPathExtractorGui" testclass="XPathExtractor" testname="getClassOfService" enabled="true">
              <stringProp name="XPathExtractor.default">null</stringProp>
              <stringProp name="XPathExtractor.refname">getClassOfService</stringProp>
              <stringProp name="XPathExtractor.matchNumber">-1</stringProp>
              <stringProp name="XPathExtractor.xpathQuery">/AirShoppingRS/DataLists/FlightSegmentList/FlightSegment[1]/ClassOfService/Code</stringProp>
              <boolProp name="XPathExtractor.validate">false</boolProp>
              <boolProp name="XPathExtractor.tolerant">false</boolProp>
              <boolProp name="XPathExtractor.namespace">false</boolProp>
            </XPathExtractor>
            <hashTree/>
            <XPathExtractor guiclass="XPathExtractorGui" testclass="XPathExtractor" testname="getPriceGuaranteeTimeLimit" enabled="true">
              <stringProp name="XPathExtractor.default">null</stringProp>
              <stringProp name="XPathExtractor.refname">getPriceGuaranteeTimeLimit</stringProp>
              <stringProp name="XPathExtractor.matchNumber">-1</stringProp>
              <stringProp name="XPathExtractor.xpathQuery">/AirShoppingRS/OffersGroup/AirlineOffers/AirlineOffer/TimeLimits/OtherLimits/OtherLimit/PriceGuaranteeTimeLimit/@Timestamp</stringProp>
              <boolProp name="XPathExtractor.validate">false</boolProp>
              <boolProp name="XPathExtractor.tolerant">false</boolProp>
              <boolProp name="XPathExtractor.namespace">false</boolProp>
            </XPathExtractor>
            <hashTree/>
            <XPathExtractor guiclass="XPathExtractorGui" testclass="XPathExtractor" testname="getTicketBy" enabled="true">
              <stringProp name="XPathExtractor.default">null</stringProp>
              <stringProp name="XPathExtractor.refname">getTicketBy</stringProp>
              <stringProp name="XPathExtractor.matchNumber">-1</stringProp>
              <stringProp name="XPathExtractor.xpathQuery">/AirShoppingRS/OffersGroup/AirlineOffers/AirlineOffer/TimeLimits/OtherLimits/OtherLimit/TicketByTimeLimit/TicketBy</stringProp>
              <boolProp name="XPathExtractor.validate">false</boolProp>
              <boolProp name="XPathExtractor.tolerant">false</boolProp>
              <boolProp name="XPathExtractor.namespace">false</boolProp>
            </XPathExtractor>
            <hashTree/>
            <XPathExtractor guiclass="XPathExtractorGui" testclass="XPathExtractor" testname="getDepartureDateSEG1" enabled="true">
              <stringProp name="XPathExtractor.default">null</stringProp>
              <stringProp name="XPathExtractor.refname">getDepartureDateSEG1</stringProp>
              <stringProp name="XPathExtractor.matchNumber">-1</stringProp>
              <stringProp name="XPathExtractor.xpathQuery">/AirShoppingRS/DataLists/FlightSegmentList/FlightSegment[@SegmentKey=&apos;SEG1&apos;]/Departure/Date</stringProp>
              <boolProp name="XPathExtractor.validate">false</boolProp>
              <boolProp name="XPathExtractor.tolerant">false</boolProp>
              <boolProp name="XPathExtractor.namespace">false</boolProp>
            </XPathExtractor>
            <hashTree/>
            <XPathExtractor guiclass="XPathExtractorGui" testclass="XPathExtractor" testname="getDepartureTimeSEG1" enabled="true">
              <stringProp name="XPathExtractor.default">null</stringProp>
              <stringProp name="XPathExtractor.refname">getDepartureTimeSEG1</stringProp>
              <stringProp name="XPathExtractor.matchNumber">-1</stringProp>
              <stringProp name="XPathExtractor.xpathQuery">/AirShoppingRS/DataLists/FlightSegmentList/FlightSegment[@SegmentKey=&apos;SEG1&apos;]/Departure/Time</stringProp>
              <boolProp name="XPathExtractor.validate">false</boolProp>
              <boolProp name="XPathExtractor.tolerant">false</boolProp>
              <boolProp name="XPathExtractor.namespace">false</boolProp>
            </XPathExtractor>
            <hashTree/>
            <XPathExtractor guiclass="XPathExtractorGui" testclass="XPathExtractor" testname="getArrivalDateSEG1" enabled="true">
              <stringProp name="XPathExtractor.default">null</stringProp>
              <stringProp name="XPathExtractor.refname">getArrivalDateSEG1</stringProp>
              <stringProp name="XPathExtractor.matchNumber">-1</stringProp>
              <stringProp name="XPathExtractor.xpathQuery">/AirShoppingRS/DataLists/FlightSegmentList/FlightSegment[@SegmentKey=&apos;SEG1&apos;]/Arrival/Date</stringProp>
              <boolProp name="XPathExtractor.validate">false</boolProp>
              <boolProp name="XPathExtractor.tolerant">false</boolProp>
              <boolProp name="XPathExtractor.namespace">false</boolProp>
            </XPathExtractor>
            <hashTree/>
            <XPathExtractor guiclass="XPathExtractorGui" testclass="XPathExtractor" testname="getBaseAmountSEG1ADT1" enabled="true">
              <stringProp name="XPathExtractor.default">0</stringProp>
              <stringProp name="XPathExtractor.refname">getBaseAmountSEG1ADT1</stringProp>
              <stringProp name="XPathExtractor.matchNumber">-1</stringProp>
              <stringProp name="XPathExtractor.xpathQuery">/AirShoppingRS/OffersGroup/AirlineOffers/AirlineOffer[1]/PricedOffer/OfferPrice[1]/FareDetail/FareComponent[1]/PriceBreakdown/Price/BaseAmount</stringProp>
              <boolProp name="XPathExtractor.validate">false</boolProp>
              <boolProp name="XPathExtractor.tolerant">false</boolProp>
              <boolProp name="XPathExtractor.namespace">false</boolProp>
            </XPathExtractor>
            <hashTree/>
            <XPathExtractor guiclass="XPathExtractorGui" testclass="XPathExtractor" testname="getRemarksSEG1ADT1" enabled="true">
              <stringProp name="XPathExtractor.default">null</stringProp>
              <stringProp name="XPathExtractor.refname">getRemarksSEG1ADT1</stringProp>
              <stringProp name="XPathExtractor.matchNumber">-1</stringProp>
              <stringProp name="XPathExtractor.xpathQuery">/AirShoppingRS/OffersGroup/AirlineOffers/AirlineOffer[1]/PricedOffer/OfferPrice[1]/FareDetail/Remarks/Remark</stringProp>
              <boolProp name="XPathExtractor.validate">false</boolProp>
              <boolProp name="XPathExtractor.tolerant">false</boolProp>
              <boolProp name="XPathExtractor.namespace">false</boolProp>
            </XPathExtractor>
            <hashTree/>
            <XPathExtractor guiclass="XPathExtractorGui" testclass="XPathExtractor" testname="getFareBasisCodeSEG1ADT1" enabled="true">
              <stringProp name="XPathExtractor.default">0</stringProp>
              <stringProp name="XPathExtractor.refname">getFareBasisCodeSEG1ADT1</stringProp>
              <stringProp name="XPathExtractor.matchNumber">-1</stringProp>
              <stringProp name="XPathExtractor.xpathQuery">/AirShoppingRS/OffersGroup/AirlineOffers/AirlineOffer[1]/PricedOffer/OfferPrice[1]/FareDetail/FareComponent[1]/FareBasis/FareBasisCode/Code</stringProp>
              <boolProp name="XPathExtractor.validate">false</boolProp>
              <boolProp name="XPathExtractor.tolerant">false</boolProp>
              <boolProp name="XPathExtractor.namespace">false</boolProp>
            </XPathExtractor>
            <hashTree/>
            <XPathExtractor guiclass="XPathExtractorGui" testclass="XPathExtractor" testname="getTaxAmountSEG1ADT1" enabled="true">
              <stringProp name="XPathExtractor.default">0</stringProp>
              <stringProp name="XPathExtractor.refname">getTaxAmountSEG1ADT1</stringProp>
              <stringProp name="XPathExtractor.matchNumber">-1</stringProp>
              <stringProp name="XPathExtractor.xpathQuery">/AirShoppingRS/OffersGroup/AirlineOffers/AirlineOffer[1]/PricedOffer/OfferPrice[1]/FareDetail/FareComponent[1]/PriceBreakdown/Price/Taxes/Total</stringProp>
              <boolProp name="XPathExtractor.validate">false</boolProp>
              <boolProp name="XPathExtractor.tolerant">false</boolProp>
              <boolProp name="XPathExtractor.namespace">false</boolProp>
            </XPathExtractor>
            <hashTree/>
            <XPathExtractor guiclass="XPathExtractorGui" testclass="XPathExtractor" testname="getBaseAmountSEG1CHD1" enabled="true">
              <stringProp name="XPathExtractor.default">0</stringProp>
              <stringProp name="XPathExtractor.refname">getBaseAmountSEG1CHD1</stringProp>
              <stringProp name="XPathExtractor.matchNumber">-1</stringProp>
              <stringProp name="XPathExtractor.xpathQuery">/AirShoppingRS/OffersGroup/AirlineOffers/AirlineOffer[1]/PricedOffer/OfferPrice[2]/FareDetail/FareComponent[1]/PriceBreakdown/Price/BaseAmount</stringProp>
              <boolProp name="XPathExtractor.validate">false</boolProp>
              <boolProp name="XPathExtractor.tolerant">false</boolProp>
              <boolProp name="XPathExtractor.namespace">false</boolProp>
            </XPathExtractor>
            <hashTree/>
            <XPathExtractor guiclass="XPathExtractorGui" testclass="XPathExtractor" testname="getTaxAmountSEG1CHD1" enabled="true">
              <stringProp name="XPathExtractor.default">0</stringProp>
              <stringProp name="XPathExtractor.refname">getTaxAmountSEG1CHD1</stringProp>
              <stringProp name="XPathExtractor.matchNumber">-1</stringProp>
              <stringProp name="XPathExtractor.xpathQuery">/AirShoppingRS/OffersGroup/AirlineOffers/AirlineOffer[1]/PricedOffer/OfferPrice[2]/FareDetail/FareComponent[1]/PriceBreakdown/Price/Taxes/Total</stringProp>
              <boolProp name="XPathExtractor.validate">false</boolProp>
              <boolProp name="XPathExtractor.tolerant">false</boolProp>
              <boolProp name="XPathExtractor.namespace">false</boolProp>
            </XPathExtractor>
            <hashTree/>
            <XPathExtractor guiclass="XPathExtractorGui" testclass="XPathExtractor" testname="getFareBasisCodeSEG1CHD1" enabled="true">
              <stringProp name="XPathExtractor.default">0</stringProp>
              <stringProp name="XPathExtractor.refname">getFareBasisCodeSEG1CHD1</stringProp>
              <stringProp name="XPathExtractor.matchNumber">-1</stringProp>
              <stringProp name="XPathExtractor.xpathQuery">/AirShoppingRS/OffersGroup/AirlineOffers/AirlineOffer[1]/PricedOffer/OfferPrice[2]/FareDetail/FareComponent[1]/FareBasis/FareBasisCode/Code</stringProp>
              <boolProp name="XPathExtractor.validate">false</boolProp>
              <boolProp name="XPathExtractor.tolerant">false</boolProp>
              <boolProp name="XPathExtractor.namespace">false</boolProp>
            </XPathExtractor>
            <hashTree/>
            <XPathExtractor guiclass="XPathExtractorGui" testclass="XPathExtractor" testname="getRemarksSEG1CHD1" enabled="true">
              <stringProp name="XPathExtractor.default">null</stringProp>
              <stringProp name="XPathExtractor.refname">getRemarksSEG1CHD1</stringProp>
              <stringProp name="XPathExtractor.matchNumber">-1</stringProp>
              <stringProp name="XPathExtractor.xpathQuery">/AirShoppingRS/OffersGroup/AirlineOffers/AirlineOffer[1]/PricedOffer/OfferPrice[2]/FareDetail/Remarks/Remark</stringProp>
              <boolProp name="XPathExtractor.validate">false</boolProp>
              <boolProp name="XPathExtractor.tolerant">false</boolProp>
              <boolProp name="XPathExtractor.namespace">false</boolProp>
            </XPathExtractor>
            <hashTree/>
            <XPathExtractor guiclass="XPathExtractorGui" testclass="XPathExtractor" testname="getPayment" enabled="true">
              <stringProp name="XPathExtractor.default">0</stringProp>
              <stringProp name="XPathExtractor.refname">getPayment</stringProp>
              <stringProp name="XPathExtractor.matchNumber">-1</stringProp>
              <stringProp name="XPathExtractor.xpathQuery">sum(/AirShoppingRS/OffersGroup/AirlineOffers/AirlineOffer[1]/PricedOffer/OfferPrice[.]/FareDetail/FareComponent[.]/PriceBreakdown/Price/Taxes/Total | /AirShoppingRS/OffersGroup/AirlineOffers/AirlineOffer[1]/PricedOffer/OfferPrice[.]/FareDetail/FareComponent[.]/PriceBreakdown/Price/BaseAmount)+ 25* (${adt_number} + ${chd_number}) </stringProp>
              <boolProp name="XPathExtractor.validate">false</boolProp>
              <boolProp name="XPathExtractor.tolerant">false</boolProp>
              <boolProp name="XPathExtractor.namespace">false</boolProp>
              <stringProp name="TestPlan.comments">${__doubleSum(${getBaseAmountSEG1ADT1}, ${getTaxAmountSEG1ADT1},${getBaseAmountSEG1CHD1},${getTaxAmountSEG1CHD1} )}</stringProp>
            </XPathExtractor>
            <hashTree/>
          </hashTree>
          <TestAction guiclass="TestActionGui" testclass="TestAction" testname="Delay" enabled="true">
            <intProp name="ActionProcessor.action">1</intProp>
            <intProp name="ActionProcessor.target">0</intProp>
            <stringProp name="ActionProcessor.duration">3000 * ${delayForThreads}</stringProp>
          </TestAction>
          <hashTree/>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="OrderCreateRQ One Way With CHD" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot; standalone=&quot;yes&quot;?&gt;&#xd;
&lt;edis:OrderCreateRQ EchoToken=&quot;${cntr}-${origin}-${destination}-${adt_number}ADT-${chd_number}CHD-${numberOfONDs}OND&quot; TimeStamp=&quot;2016-03-31T00:00:00.000+03:00&quot; Version=&quot;IATA2016.2&quot; xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot; &#xd;
xmlns=&quot;http://www.iata.org/IATA/EDIST&quot; xmlns:edis=&quot;http://www.iata.org/IATA/EDIST&quot;&gt;&#xd;
	&lt;PointOfSale&gt;&#xd;
		&lt;Location&gt;&#xd;
			&lt;CountryCode&gt;US&lt;/CountryCode&gt;&#xd;
			&lt;CityCode&gt;MSP&lt;/CityCode&gt;&#xd;
		&lt;/Location&gt;&#xd;
		&lt;RequestTime Zone=&quot;EST&quot;&gt;2017-05-24T07:45:00+07:45&lt;/RequestTime&gt;&#xd;
		&lt;TouchPoint&gt;&#xd;
			&lt;Device&gt;&#xd;
				&lt;Code&gt;2&lt;/Code&gt;&#xd;
				&lt;Definition&gt;Web Browser&lt;/Definition&gt;&#xd;
				&lt;Position&gt;&#xd;
					&lt;Latitude&gt;38.89756&lt;/Latitude&gt;&#xd;
					&lt;Longitude&gt;-77.03650&lt;/Longitude&gt;&#xd;
					&lt;NAC&gt;8KD7V PGGM0&lt;/NAC&gt;&#xd;
				&lt;/Position&gt;&#xd;
			&lt;/Device&gt;&#xd;
			&lt;Event&gt;&#xd;
				&lt;Code&gt;1&lt;/Code&gt;&#xd;
				&lt;Definition&gt;Order or buy&lt;/Definition&gt;&#xd;
			&lt;/Event&gt;&#xd;
		&lt;/TouchPoint&gt;&#xd;
	&lt;/PointOfSale&gt;&#xd;
	&lt;Document&gt;&#xd;
		&lt;Name&gt;JRT UNISYS GATEWAY&lt;/Name&gt;&#xd;
		&lt;ReferenceVersion&gt;1.0&lt;/ReferenceVersion&gt;&#xd;
	&lt;/Document&gt;&#xd;
	&lt;Party&gt;&#xd;
		&lt;Sender&gt;&#xd;
			&lt;TravelAgencySender&gt;&#xd;
				&lt;Contacts&gt;&#xd;
					&lt;Contact&gt;&#xd;
						&lt;EmailContact&gt;&#xd;
							&lt;Address&gt;ndc@unisys.com&lt;/Address&gt;&#xd;
						&lt;/EmailContact&gt;&#xd;
					&lt;/Contact&gt;&#xd;
				&lt;/Contacts&gt;&#xd;
				&lt;PseudoCity&gt;A4A&lt;/PseudoCity&gt;&#xd;
				&lt;IATA_Number&gt;98417900&lt;/IATA_Number&gt;&#xd;
				&lt;AgencyID Owner=&quot;NW&quot;&gt;NW&lt;/AgencyID&gt;&#xd;
				&lt;AgentUser&gt;&#xd;
					&lt;Name&gt;ksmith&lt;/Name&gt;&#xd;
					&lt;AgentUserID&gt;ksmith212&lt;/AgentUserID&gt;&#xd;
					&lt;UserRole&gt;Admin&lt;/UserRole&gt;&#xd;
				&lt;/AgentUser&gt;&#xd;
			&lt;/TravelAgencySender&gt;&#xd;
		&lt;/Sender&gt;&#xd;
	&lt;/Party&gt;&#xd;
	&lt;Query&gt;&#xd;
		&lt;Passengers&gt;&#xd;
			&lt;Passenger ObjectKey=&quot;ADT1&quot;&gt;&#xd;
				&lt;PTC Quantity=&quot;1&quot;&gt;ADT&lt;/PTC&gt;&#xd;
				&lt;Age&gt;&#xd;
					&lt;BirthDate&gt;1980-03-06&lt;/BirthDate&gt;&#xd;
				&lt;/Age&gt;&#xd;
				&lt;Name&gt;&#xd;
					&lt;Surname&gt;Jaffa&lt;/Surname&gt;&#xd;
					&lt;Given&gt;Eric&lt;/Given&gt;&#xd;
					&lt;Middle&gt;Edward&lt;/Middle&gt;&#xd;
				&lt;/Name&gt;&#xd;
				&lt;Contacts&gt;&#xd;
					&lt;Contact&gt;&#xd;
						&lt;EmailContact&gt;&#xd;
							&lt;Address&gt;jaffa@unisys.com&lt;/Address&gt;&#xd;
						&lt;/EmailContact&gt;&#xd;
					&lt;/Contact&gt;&#xd;
				&lt;/Contacts&gt;&#xd;
				&lt;Gender&gt;Male&lt;/Gender&gt;&#xd;
			&lt;/Passenger&gt;&#xd;
			&lt;Passenger ObjectKey=&quot;CHD1&quot;&gt;&#xd;
				&lt;PTC Quantity=&quot;1&quot;&gt;CHD&lt;/PTC&gt;&#xd;
				&lt;Age&gt;&#xd;
					&lt;BirthDate&gt;2013-03-06&lt;/BirthDate&gt;&#xd;
				&lt;/Age&gt;&#xd;
				&lt;Name&gt;&#xd;
					&lt;Surname&gt;Kumar&lt;/Surname&gt;&#xd;
					&lt;Given&gt;Mithal&lt;/Given&gt;&#xd;
					&lt;Middle&gt;Savan&lt;/Middle&gt;&#xd;
				&lt;/Name&gt;&#xd;
				&lt;Contacts&gt;&#xd;
					&lt;Contact&gt;&#xd;
						&lt;EmailContact&gt;&#xd;
							&lt;Address&gt;kumar@unisys.com&lt;/Address&gt;&#xd;
						&lt;/EmailContact&gt;&#xd;
					&lt;/Contact&gt;&#xd;
				&lt;/Contacts&gt;&#xd;
				&lt;Gender&gt;Male&lt;/Gender&gt;&#xd;
			&lt;/Passenger&gt;&#xd;
		&lt;/Passengers&gt;&#xd;
		&lt;OrderItems&gt;&#xd;
			&lt;ShoppingResponse&gt;&#xd;
				&lt;Owner&gt;NW&lt;/Owner&gt;&#xd;
				&lt;ResponseID&gt;${getResponseID}&lt;/ResponseID&gt;&#xd;
				&lt;Offers&gt;&#xd;
					&lt;Offer&gt;&#xd;
						&lt;OfferID Owner=&quot;NW&quot;&gt;SOL1#OD1&lt;/OfferID&gt;&#xd;
						&lt;OfferItems&gt;&#xd;
							&lt;OfferItem&gt;&#xd;
								&lt;OfferItemID Owner=&quot;NW&quot;&gt;SOL1#OD1#ADT1&lt;/OfferItemID&gt;&#xd;
								&lt;Passengers&gt;&#xd;
									&lt;PassengerReference&gt;ADT1&lt;/PassengerReference&gt;&#xd;
								&lt;/Passengers&gt;&#xd;
								&lt;ApplicableFlight&gt;&#xd;
									&lt;OriginDestinationReferences&gt;OD1&lt;/OriginDestinationReferences&gt;&#xd;
								&lt;/ApplicableFlight&gt;&#xd;
								&lt;AssociatedServices&gt;&#xd;
									&lt;AssociatedService refs=&quot;SV9&quot;&gt;&#xd;
										&lt;ServiceID Owner=&quot;NW&quot;&gt;SV9&lt;/ServiceID&gt;&#xd;
									&lt;/AssociatedService&gt;&#xd;
									&lt;AssociatedService refs=&quot;SV2&quot;&gt;&#xd;
										&lt;ServiceID Owner=&quot;NW&quot;&gt;SV2&lt;/ServiceID&gt;&#xd;
									&lt;/AssociatedService&gt;&#xd;
								&lt;/AssociatedServices&gt;&#xd;
							&lt;/OfferItem&gt;&#xd;
							&lt;OfferItem&gt;&#xd;
								&lt;OfferItemID Owner=&quot;NW&quot;&gt;SOL1#OD1#CHD1&lt;/OfferItemID&gt;&#xd;
								&lt;Passengers&gt;&#xd;
									&lt;PassengerReference&gt;CHD1&lt;/PassengerReference&gt;&#xd;
								&lt;/Passengers&gt;&#xd;
								&lt;ApplicableFlight&gt;&#xd;
									&lt;OriginDestinationReferences&gt;OD1&lt;/OriginDestinationReferences&gt;&#xd;
								&lt;/ApplicableFlight&gt;&#xd;
								&lt;AssociatedServices&gt;&#xd;
									&lt;AssociatedService refs=&quot;SV9&quot;&gt;&#xd;
										&lt;ServiceID Owner=&quot;NW&quot;&gt;SV9&lt;/ServiceID&gt;&#xd;
									&lt;/AssociatedService&gt;&#xd;
									&lt;AssociatedService refs=&quot;SV2&quot;&gt;&#xd;
										&lt;ServiceID Owner=&quot;NW&quot;&gt;SV2&lt;/ServiceID&gt;&#xd;
									&lt;/AssociatedService&gt;&#xd;
								&lt;/AssociatedServices&gt;&#xd;
							&lt;/OfferItem&gt;&#xd;
						&lt;/OfferItems&gt;&#xd;
					&lt;/Offer&gt;&#xd;
				&lt;/Offers&gt;&#xd;
			&lt;/ShoppingResponse&gt;&#xd;
			&lt;OfferItem&gt;&#xd;
				&lt;OfferItemID Owner=&quot;NW&quot;&gt;SOL1#OD1#ADT1&lt;/OfferItemID&gt;&#xd;
				&lt;OfferItemType&gt;&#xd;
					&lt;DetailedFlightItem&gt;&#xd;
						&lt;OriginDestination&gt;&#xd;
							&lt;Flight&gt;&#xd;
								&lt;Departure&gt;&#xd;
									&lt;AirportCode&gt;${origin}&lt;/AirportCode&gt;&#xd;
									&lt;Date&gt;${getDepartureDateSEG1}&lt;/Date&gt;&#xd;
									&lt;Time&gt;${getDepartureTimeSEG1}&lt;/Time&gt;&#xd;
								&lt;/Departure&gt;&#xd;
								&lt;Arrival&gt;&#xd;
									&lt;AirportCode&gt;${destination}&lt;/AirportCode&gt;&#xd;
									&lt;Date&gt;${getArrivalDateSEG1}&lt;/Date&gt;&#xd;
								&lt;/Arrival&gt;&#xd;
								&lt;MarketingCarrier&gt;&#xd;
									&lt;AirlineID&gt;NW&lt;/AirlineID&gt;&#xd;
									&lt;FlightNumber&gt;${getFlightNumber}&lt;/FlightNumber&gt;&#xd;
								&lt;/MarketingCarrier&gt;&#xd;
								&lt;OperatingCarrier&gt;&#xd;
									&lt;AirlineID&gt;NW&lt;/AirlineID&gt;&#xd;
									&lt;FlightNumber&gt;${getFlightNumber}&lt;/FlightNumber&gt;&#xd;
								&lt;/OperatingCarrier&gt;&#xd;
							&lt;/Flight&gt;&#xd;
						&lt;/OriginDestination&gt;&#xd;
						&lt;FareDetail&gt;&#xd;
							&lt;FareComponent&gt;&#xd;
								&lt;SegmentReference&gt;SEG1&lt;/SegmentReference&gt;&#xd;
								&lt;PriceBreakdown&gt;&#xd;
									&lt;Price&gt;&#xd;
										&lt;BaseAmount Code=&quot;USD&quot;&gt;${getBaseAmountSEG1ADT1}&lt;/BaseAmount&gt;&#xd;
										&lt;Taxes&gt;&#xd;
											&lt;Total Code=&quot;USD&quot;&gt;${getTaxAmountSEG1ADT1}&lt;/Total&gt;&#xd;
										&lt;/Taxes&gt;&#xd;
									&lt;/Price&gt;&#xd;
								&lt;/PriceBreakdown&gt;&#xd;
								&lt;FareBasis&gt;&#xd;
									&lt;FareBasisCode&gt;&#xd;
										&lt;Code&gt;${getFareBasisCodeSEG1ADT1}&lt;/Code&gt;&#xd;
									&lt;/FareBasisCode&gt;&#xd;
									&lt;RBD&gt;Y&lt;/RBD&gt;&#xd;
								&lt;/FareBasis&gt;&#xd;
								&lt;FareRules&gt;&#xd;
									&lt;Remarks&gt;&#xd;
										&lt;Remark&gt;${getRemarksSEG1ADT1}&lt;/Remark&gt;&#xd;
									&lt;/Remarks&gt;&#xd;
								&lt;/FareRules&gt;&#xd;
							&lt;/FareComponent&gt;&#xd;
						&lt;/FareDetail&gt;&#xd;
					&lt;/DetailedFlightItem&gt;&#xd;
				&lt;/OfferItemType&gt;&#xd;
				&lt;TimeLimits&gt;&#xd;
					&lt;TimeLimit&gt;&#xd;
						&lt;PriceGuaranteeTimeLimit Timestamp=&quot;${getPriceGuaranteeTimeLimit}&quot;/&gt;&#xd;
						&lt;TicketByTimeLimit&gt;&#xd;
							&lt;TicketBy&gt;${getTicketBy}&lt;/TicketBy&gt;&#xd;
						&lt;/TicketByTimeLimit&gt;&#xd;
					&lt;/TimeLimit&gt;&#xd;
				&lt;/TimeLimits&gt;&#xd;
			&lt;/OfferItem&gt;&#xd;
			&lt;OfferItem&gt;&#xd;
				&lt;OfferItemID Owner=&quot;NW&quot;&gt;SOL1#OD1#CHD1&lt;/OfferItemID&gt;&#xd;
				&lt;OfferItemType&gt;&#xd;
					&lt;DetailedFlightItem&gt;&#xd;
						&lt;OriginDestination&gt;&#xd;
							&lt;Flight&gt;&#xd;
								&lt;Departure&gt;&#xd;
									&lt;AirportCode&gt;${origin}&lt;/AirportCode&gt;&#xd;
									&lt;Date&gt;${getDepartureDateSEG1}&lt;/Date&gt;&#xd;
									&lt;Time&gt;${getDepartureTimeSEG1}&lt;/Time&gt;&#xd;
								&lt;/Departure&gt;&#xd;
								&lt;Arrival&gt;&#xd;
									&lt;AirportCode&gt;${destination}&lt;/AirportCode&gt;&#xd;
									&lt;Date&gt;${getArrivalDateSEG1}&lt;/Date&gt;&#xd;
								&lt;/Arrival&gt;&#xd;
								&lt;MarketingCarrier&gt;&#xd;
									&lt;AirlineID&gt;NW&lt;/AirlineID&gt;&#xd;
									&lt;FlightNumber&gt;${getFlightNumber}&lt;/FlightNumber&gt;&#xd;
								&lt;/MarketingCarrier&gt;&#xd;
								&lt;OperatingCarrier&gt;&#xd;
									&lt;AirlineID&gt;NW&lt;/AirlineID&gt;&#xd;
									&lt;FlightNumber&gt;${getFlightNumber}&lt;/FlightNumber&gt;&#xd;
								&lt;/OperatingCarrier&gt;&#xd;
							&lt;/Flight&gt;&#xd;
						&lt;/OriginDestination&gt;&#xd;
						&lt;FareDetail&gt;&#xd;
							&lt;FareComponent&gt;&#xd;
								&lt;SegmentReference&gt;SEG1&lt;/SegmentReference&gt;&#xd;
								&lt;PriceBreakdown&gt;&#xd;
									&lt;Price&gt;&#xd;
										&lt;BaseAmount Code=&quot;USD&quot;&gt;${getBaseAmountSEG1CHD1}&lt;/BaseAmount&gt;&#xd;
										&lt;Taxes&gt;&#xd;
											&lt;Total Code=&quot;USD&quot;&gt;${getTaxAmountSEG1CHD1}&lt;/Total&gt;&#xd;
										&lt;/Taxes&gt;&#xd;
									&lt;/Price&gt;&#xd;
								&lt;/PriceBreakdown&gt;&#xd;
								&lt;FareBasis&gt;&#xd;
									&lt;FareBasisCode&gt;&#xd;
										&lt;Code&gt;${getFareBasisCodeSEG1CHD1}&lt;/Code&gt;&#xd;
									&lt;/FareBasisCode&gt;&#xd;
									&lt;RBD&gt;Y&lt;/RBD&gt;&#xd;
								&lt;/FareBasis&gt;&#xd;
								&lt;FareRules&gt;&#xd;
									&lt;Remarks&gt;&#xd;
										&lt;Remark&gt;${getRemarksSEG1CHD1}&lt;/Remark&gt;&#xd;
									&lt;/Remarks&gt;&#xd;
								&lt;/FareRules&gt;&#xd;
							&lt;/FareComponent&gt;&#xd;
						&lt;/FareDetail&gt;&#xd;
					&lt;/DetailedFlightItem&gt;&#xd;
				&lt;/OfferItemType&gt;&#xd;
				&lt;TimeLimits&gt;&#xd;
					&lt;TimeLimit&gt;&#xd;
						&lt;PriceGuaranteeTimeLimit Timestamp=&quot;${getPriceGuaranteeTimeLimit}&quot;/&gt;&#xd;
						&lt;TicketByTimeLimit&gt;&#xd;
							&lt;TicketBy&gt;${getTicketBy}&lt;/TicketBy&gt;&#xd;
						&lt;/TicketByTimeLimit&gt;&#xd;
					&lt;/TimeLimit&gt;&#xd;
				&lt;/TimeLimits&gt;&#xd;
			&lt;/OfferItem&gt;&#xd;
		&lt;/OrderItems&gt;&#xd;
		&lt;Payments&gt;&#xd;
			&lt;Payment&gt;&#xd;
				&lt;Method&gt;&#xd;
					&lt;PaymentCard&gt;&#xd;
						&lt;CardType&gt;Visa&lt;/CardType&gt;&#xd;
						&lt;CardCode&gt;VI&lt;/CardCode&gt;&#xd;
						&lt;CardNumber&gt;4111111111111111&lt;/CardNumber&gt;&#xd;
						&lt;SeriesCode&gt;584&lt;/SeriesCode&gt;&#xd;
						&lt;EffectiveExpireDate&gt;&#xd;
							&lt;Expiration&gt;1217&lt;/Expiration&gt;&#xd;
						&lt;/EffectiveExpireDate&gt;&#xd;
					&lt;/PaymentCard&gt;&#xd;
				&lt;/Method&gt;&#xd;
				&lt;Amount Code=&quot;USD&quot; Taxable=&quot;true&quot;&gt;${getPayment}&lt;/Amount&gt;&#xd;
				&lt;Payer&gt;&#xd;
					&lt;Name&gt;&#xd;
						&lt;Surname&gt;Kumar&lt;/Surname&gt;&#xd;
						&lt;Given&gt;Mithalesh&lt;/Given&gt;&#xd;
					&lt;/Name&gt;&#xd;
					&lt;Contacts&gt;&#xd;
						&lt;Contact&gt;&#xd;
							&lt;AddressContact&gt;&#xd;
								&lt;Street&gt;22 Main Street&lt;/Street&gt;&#xd;
								&lt;CityName&gt;FRA&lt;/CityName&gt;&#xd;
								&lt;PostalCode&gt;14201&lt;/PostalCode&gt;&#xd;
								&lt;CountryCode&gt;DE&lt;/CountryCode&gt;&#xd;
							&lt;/AddressContact&gt;&#xd;
							&lt;EmailContact&gt;&#xd;
								&lt;Address&gt;ramesh@unisys.com&lt;/Address&gt;&#xd;
							&lt;/EmailContact&gt;&#xd;
						&lt;/Contact&gt;&#xd;
					&lt;/Contacts&gt;&#xd;
				&lt;/Payer&gt;&#xd;
			&lt;/Payment&gt;&#xd;
		&lt;/Payments&gt;&#xd;
		&lt;DataLists&gt;&#xd;
			&lt;edis:CarryOnAllowanceList&gt;&#xd;
				&lt;edis:CarryOnAllowance ListKey=&quot;AW1&quot;&gt;&#xd;
					&lt;edis:DimensionAllowance&gt;&#xd;
						&lt;edis:DimensionUOM&gt;Inch&lt;/edis:DimensionUOM&gt;&#xd;
						&lt;edis:Dimensions&gt;&#xd;
							&lt;edis:Category&gt;L&lt;/edis:Category&gt;&#xd;
							&lt;edis:MaxValue&gt;30&lt;/edis:MaxValue&gt;&#xd;
						&lt;/edis:Dimensions&gt;&#xd;
						&lt;edis:Dimensions&gt;&#xd;
							&lt;edis:Category&gt;W&lt;/edis:Category&gt;&#xd;
							&lt;edis:MaxValue&gt;30&lt;/edis:MaxValue&gt;&#xd;
						&lt;/edis:Dimensions&gt;&#xd;
						&lt;edis:Dimensions&gt;&#xd;
							&lt;edis:Category&gt;H&lt;/edis:Category&gt;&#xd;
							&lt;edis:MaxValue&gt;30&lt;/edis:MaxValue&gt;&#xd;
						&lt;/edis:Dimensions&gt;&#xd;
					&lt;/edis:DimensionAllowance&gt;&#xd;
					&lt;edis:WeightAllowance&gt;&#xd;
						&lt;edis:MaximumWeight&gt;&#xd;
							&lt;edis:Value&gt;5&lt;/edis:Value&gt;&#xd;
							&lt;edis:UOM&gt;Kilogram&lt;/edis:UOM&gt;&#xd;
						&lt;/edis:MaximumWeight&gt;&#xd;
					&lt;/edis:WeightAllowance&gt;&#xd;
				&lt;/edis:CarryOnAllowance&gt;&#xd;
			&lt;/edis:CarryOnAllowanceList&gt;&#xd;
			&lt;edis:CheckedBagAllowanceList&gt;&#xd;
				&lt;edis:CheckedBagAllowance ListKey=&quot;AW2&quot;&gt;&#xd;
					&lt;edis:DimensionAllowance&gt;&#xd;
						&lt;edis:DimensionUOM&gt;Inch&lt;/edis:DimensionUOM&gt;&#xd;
						&lt;edis:Dimensions&gt;&#xd;
							&lt;edis:Category&gt;L&lt;/edis:Category&gt;&#xd;
							&lt;edis:MaxValue&gt;15&lt;/edis:MaxValue&gt;&#xd;
						&lt;/edis:Dimensions&gt;&#xd;
						&lt;edis:Dimensions&gt;&#xd;
							&lt;edis:Category&gt;W&lt;/edis:Category&gt;&#xd;
							&lt;edis:MaxValue&gt;16&lt;/edis:MaxValue&gt;&#xd;
						&lt;/edis:Dimensions&gt;&#xd;
						&lt;edis:Dimensions&gt;&#xd;
							&lt;edis:Category&gt;H&lt;/edis:Category&gt;&#xd;
							&lt;edis:MaxValue&gt;17&lt;/edis:MaxValue&gt;&#xd;
						&lt;/edis:Dimensions&gt;&#xd;
					&lt;/edis:DimensionAllowance&gt;&#xd;
					&lt;edis:WeightAllowance&gt;&#xd;
						&lt;edis:MaximumWeight&gt;&#xd;
							&lt;edis:Value&gt;10&lt;/edis:Value&gt;&#xd;
							&lt;edis:UOM&gt;Kilogram&lt;/edis:UOM&gt;&#xd;
						&lt;/edis:MaximumWeight&gt;&#xd;
					&lt;/edis:WeightAllowance&gt;&#xd;
				&lt;/edis:CheckedBagAllowance&gt;&#xd;
			&lt;/edis:CheckedBagAllowanceList&gt;&#xd;
			&lt;FlightSegmentList&gt;&#xd;
				&lt;FlightSegment SegmentKey=&quot;SEG1&quot;&gt;&#xd;
					&lt;Departure&gt;&#xd;
						&lt;AirportCode&gt;${origin}&lt;/AirportCode&gt;&#xd;
						&lt;Date&gt;${getDepartureDateSEG1}&lt;/Date&gt;&#xd;
						&lt;Time&gt;${getDepartureTimeSEG1}&lt;/Time&gt;&#xd;
					&lt;/Departure&gt;&#xd;
					&lt;Arrival&gt;&#xd;
						&lt;AirportCode&gt;${destination}&lt;/AirportCode&gt;&#xd;
						&lt;Date&gt;${getArrivalDateSEG1}&lt;/Date&gt;&#xd;
					&lt;/Arrival&gt;&#xd;
					&lt;MarketingCarrier&gt;&#xd;
						&lt;AirlineID&gt;NW&lt;/AirlineID&gt;&#xd;
						&lt;FlightNumber&gt;${getFlightNumber}&lt;/FlightNumber&gt;&#xd;
					&lt;/MarketingCarrier&gt;&#xd;
					&lt;OperatingCarrier&gt;&#xd;
						&lt;AirlineID&gt;NW&lt;/AirlineID&gt;&#xd;
						&lt;FlightNumber&gt;${getFlightNumber}&lt;/FlightNumber&gt;&#xd;
					&lt;/OperatingCarrier&gt;&#xd;
					&lt;Equipment&gt;&#xd;
						&lt;AircraftCode&gt;${getAircraftCode}&lt;/AircraftCode&gt;&#xd;
					&lt;/Equipment&gt;&#xd;
					&lt;ClassOfService&gt;&#xd;
						&lt;Code&gt;${getClassOfService}&lt;/Code&gt;&#xd;
						&lt;MarketingName&gt;Economy&lt;/MarketingName&gt;&#xd;
					&lt;/ClassOfService&gt;&#xd;
					&lt;FlightDetail&gt;&#xd;
						&lt;FlightDuration&gt;&#xd;
							&lt;Value&gt;PT5H0M&lt;/Value&gt;&#xd;
						&lt;/FlightDuration&gt;&#xd;
					&lt;/FlightDetail&gt;&#xd;
				&lt;/FlightSegment&gt;&#xd;
			&lt;/FlightSegmentList&gt;&#xd;
			&lt;FlightList&gt;&#xd;
				&lt;Flight FlightKey=&quot;FL1&quot;&gt;&#xd;
					&lt;Journey&gt;&#xd;
						&lt;Time&gt;PT16H10M&lt;/Time&gt;&#xd;
					&lt;/Journey&gt;&#xd;
					&lt;SegmentReferences&gt;SEG1&lt;/SegmentReferences&gt;&#xd;
				&lt;/Flight&gt;&#xd;
			&lt;/FlightList&gt;&#xd;
			&lt;OriginDestinationList&gt;&#xd;
				&lt;OriginDestination OriginDestinationKey=&quot;OD1&quot;&gt;&#xd;
					&lt;DepartureCode&gt;${origin}&lt;/DepartureCode&gt;&#xd;
					&lt;ArrivalCode&gt;${destination}&lt;/ArrivalCode&gt;&#xd;
					&lt;FlightReferences&gt;FL1&lt;/FlightReferences&gt;&#xd;
				&lt;/OriginDestination&gt;&#xd;
			&lt;/OriginDestinationList&gt;&#xd;
			&lt;ServiceList&gt;&#xd;
				&lt;Service ObjectKey=&quot;SV2&quot;&gt;&#xd;
					&lt;ServiceID Owner=&quot;NW&quot;&gt;50&lt;/ServiceID&gt;&#xd;
					&lt;Name&gt;Veg Meal&lt;/Name&gt;&#xd;
					&lt;Encoding&gt;&#xd;
						&lt;RFIC&gt;&#xd;
							&lt;Code&gt;G&lt;/Code&gt;&#xd;
						&lt;/RFIC&gt;&#xd;
						&lt;SubCode&gt;0AP&lt;/SubCode&gt;&#xd;
					&lt;/Encoding&gt;&#xd;
					&lt;Descriptions&gt;&#xd;
						&lt;Description&gt;&#xd;
							&lt;Text&gt;Veg Meal&lt;/Text&gt;&#xd;
						&lt;/Description&gt;&#xd;
					&lt;/Descriptions&gt;&#xd;
					&lt;Price&gt;&#xd;
						&lt;Total Code=&quot;USD&quot;&gt;0.00&lt;/Total&gt;&#xd;
						&lt;PassengerReferences&gt;ADT1 CHD1&lt;/PassengerReferences&gt;&#xd;
					&lt;/Price&gt;&#xd;
					&lt;BookingInstructions&gt;&#xd;
						&lt;SSRCode&gt;OTHS&lt;/SSRCode&gt;&#xd;
					&lt;/BookingInstructions&gt;&#xd;
					&lt;Associations&gt;&#xd;
						&lt;Flight&gt;&#xd;
							&lt;SegmentReferences&gt;SEG1&lt;/SegmentReferences&gt;&#xd;
						&lt;/Flight&gt;&#xd;
					&lt;/Associations&gt;&#xd;
				&lt;/Service&gt;&#xd;
				&lt;Service ObjectKey=&quot;SV9&quot;&gt;&#xd;
					&lt;ServiceID Owner=&quot;NW&quot;&gt;1026&lt;/ServiceID&gt;&#xd;
					&lt;Name&gt;Excess Baggage&lt;/Name&gt;&#xd;
					&lt;Encoding&gt;&#xd;
						&lt;RFIC&gt;&#xd;
							&lt;Code&gt;C&lt;/Code&gt;&#xd;
						&lt;/RFIC&gt;&#xd;
						&lt;SubCode&gt;0CC&lt;/SubCode&gt;&#xd;
					&lt;/Encoding&gt;&#xd;
					&lt;Descriptions&gt;&#xd;
						&lt;Description&gt;&#xd;
							&lt;Text&gt;EXCESS BAGGAGE&lt;/Text&gt;&#xd;
						&lt;/Description&gt;&#xd;
					&lt;/Descriptions&gt;&#xd;
					&lt;Price&gt;&#xd;
						&lt;Total Code=&quot;USD&quot;&gt;25.00&lt;/Total&gt;&#xd;
						&lt;PassengerReferences&gt;ADT1 CHD1&lt;/PassengerReferences&gt;&#xd;
					&lt;/Price&gt;&#xd;
					&lt;BookingInstructions&gt;&#xd;
						&lt;SSRCode&gt;XBAG&lt;/SSRCode&gt;&#xd;
					&lt;/BookingInstructions&gt;&#xd;
					&lt;Associations&gt;&#xd;
						&lt;Flight&gt;&#xd;
							&lt;SegmentReferences&gt;SEG1&lt;/SegmentReferences&gt;&#xd;
						&lt;/Flight&gt;&#xd;
						&lt;OtherAssociations&gt;&#xd;
							&lt;OtherAssociation&gt;&#xd;
								&lt;Type&gt;CARRY&lt;/Type&gt;&#xd;
								&lt;ReferenceValue&gt;AW1&lt;/ReferenceValue&gt;&#xd;
							&lt;/OtherAssociation&gt;&#xd;
						&lt;/OtherAssociations&gt;&#xd;
					&lt;/Associations&gt;&#xd;
				&lt;/Service&gt;&#xd;
			&lt;/ServiceList&gt;&#xd;
		&lt;/DataLists&gt;&#xd;
	&lt;/Query&gt;&#xd;
&lt;/edis:OrderCreateRQ&gt;&#xd;
</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${IP}</stringProp>
            <stringProp name="HTTPSampler.port">${port}</stringProp>
            <stringProp name="HTTPSampler.protocol"></stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">/ndcgateway</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">Content-Type</stringProp>
                  <stringProp name="Header.value">application/xml</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
          </hashTree>
        </hashTree>
        <IfController guiclass="IfControllerPanel" testclass="IfController" testname="Else" enabled="true">
          <stringProp name="IfController.condition">${chd_number}==0</stringProp>
          <boolProp name="IfController.evaluateAll">false</boolProp>
        </IfController>
        <hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="AirShoppingRQ One Way No CHD" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;&#xd;
&lt;AirShoppingRQ EchoToken=&quot;${cntr}-${origin}-${destination}-${adt_number}ADT-${numberOfONDs}OND&quot; TimeStamp=&quot;2016-03-31T00:00:00.000+03:00&quot; Version=&quot;IATA2016.2&quot;&#xd;
               TransactionIdentifier=&quot;TRN12345&quot; Target=&quot;Test&quot; xmlns=&quot;http://www.iata.org/IATA/EDIST&quot;&gt;&#xd;
	&lt;PointOfSale&gt;&#xd;
		&lt;Location&gt;&#xd;
			&lt;CountryCode&gt;US&lt;/CountryCode&gt;&#xd;
			&lt;CityCode&gt;WAS&lt;/CityCode&gt;&#xd;
		&lt;/Location&gt;&#xd;
		&lt;TouchPoint&gt;&#xd;
			&lt;Device&gt;&#xd;
				&lt;Code&gt;2&lt;/Code&gt;&#xd;
				&lt;Definition&gt;Web Browser&lt;/Definition&gt;&#xd;
				&lt;Position&gt;&#xd;
					&lt;Latitude&gt;38.89756&lt;/Latitude&gt;&#xd;
					&lt;Longitude&gt;-77.03650&lt;/Longitude&gt;&#xd;
					&lt;NAC&gt;8KD7V PGGM0&lt;/NAC&gt;&#xd;
				&lt;/Position&gt;&#xd;
			&lt;/Device&gt;&#xd;
			&lt;Event&gt;&#xd;
				&lt;Code&gt;9&lt;/Code&gt;&#xd;
				&lt;Definition&gt;Shop&lt;/Definition&gt;&#xd;
			&lt;/Event&gt;&#xd;
		&lt;/TouchPoint&gt;&#xd;
	&lt;/PointOfSale&gt;&#xd;
	&lt;Document&gt;&#xd;
		&lt;ReferenceVersion&gt;1.0&lt;/ReferenceVersion&gt;&#xd;
	&lt;/Document&gt;&#xd;
	&lt;Party&gt;&#xd;
		&lt;Sender&gt;&#xd;
			&lt;TravelAgencySender&gt;&#xd;
				&lt;Name&gt;JR TECHNOLOGIES&lt;/Name&gt;&#xd;
				&lt;IATA_Number&gt;20200154&lt;/IATA_Number&gt;&#xd;
				&lt;AgencyID&gt;00010080&lt;/AgencyID&gt;&#xd;
			&lt;/TravelAgencySender&gt;&#xd;
		&lt;/Sender&gt;&#xd;
	&lt;/Party&gt;&#xd;
	&lt;Travelers&gt;&#xd;
		&lt;Traveler&gt;&#xd;
			&lt;AnonymousTraveler&gt;&#xd;
				&lt;PTC Quantity=&quot;${adt_number}&quot;&gt;ADT&lt;/PTC&gt;&#xd;
			&lt;/AnonymousTraveler&gt;&#xd;
		&lt;/Traveler&gt;&#xd;
	&lt;/Travelers&gt;&#xd;
	&lt;CoreQuery&gt;&#xd;
		&lt;OriginDestinations&gt;&#xd;
			&lt;OriginDestination&gt;&#xd;
				&lt;Departure&gt;&#xd;
					&lt;AirportCode&gt;${origin}&lt;/AirportCode&gt;&#xd;
					&lt;Date&gt;${start}&lt;/Date&gt;&#xd;
				&lt;/Departure&gt;&#xd;
				&lt;Arrival&gt;&#xd;
					&lt;AirportCode&gt;${destination}&lt;/AirportCode&gt;&#xd;
				&lt;/Arrival&gt;&#xd;
				&lt;MarketingCarrierAirline&gt;&#xd;
					&lt;AirlineID&gt;NW&lt;/AirlineID&gt;&#xd;
					&lt;Name&gt;Northwest Airlines&lt;/Name&gt;&#xd;
				&lt;/MarketingCarrierAirline&gt;&#xd;
			&lt;/OriginDestination&gt;&#xd;
			${ondString}&#xd;
		&lt;/OriginDestinations&gt;&#xd;
	&lt;/CoreQuery&gt;&#xd;
&lt;Preference&gt;&#xd;
		&lt;CabinPreferences&gt;&#xd;
			&lt;CabinType&gt;&#xd;
				&lt;Code&gt;Economy&lt;/Code&gt;&#xd;
			&lt;/CabinType&gt;&#xd;
		&lt;/CabinPreferences&gt;&#xd;
	&lt;/Preference&gt;&#xd;
	&lt;Metadata&gt;&#xd;
		&lt;Other&gt;&#xd;
			&lt;OtherMetadata&gt;&#xd;
				&lt;CurrencyMetadatas&gt;&#xd;
					&lt;CurrencyMetadata MetadataKey=&quot;USD&quot;&gt;&#xd;
						&lt;Decimals&gt;2&lt;/Decimals&gt;&#xd;
					&lt;/CurrencyMetadata&gt;&#xd;
				&lt;/CurrencyMetadatas&gt;&#xd;
			&lt;/OtherMetadata&gt;&#xd;
			&lt;OtherMetadata&gt;&#xd;
				&lt;LanguageMetadatas&gt;&#xd;
					&lt;LanguageMetadata MetadataKey=&quot;Display&quot;&gt;&#xd;
						&lt;Application&gt;Display&lt;/Application&gt;&#xd;
						&lt;Code_ISO&gt;en&lt;/Code_ISO&gt;&#xd;
					&lt;/LanguageMetadata&gt;&#xd;
				&lt;/LanguageMetadatas&gt;&#xd;
			&lt;/OtherMetadata&gt;&#xd;
		&lt;/Other&gt;&#xd;
	&lt;/Metadata&gt;&#xd;
&lt;/AirShoppingRQ&gt;</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${IP}</stringProp>
            <stringProp name="HTTPSampler.port">${port}</stringProp>
            <stringProp name="HTTPSampler.protocol"></stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">/ndcgateway</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
            <stringProp name="TestPlan.comments">// 
216.226.146.183</stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">Content-Type</stringProp>
                  <stringProp name="Header.value">application/xml</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
            <XPathExtractor guiclass="XPathExtractorGui" testclass="XPathExtractor" testname="getResponseID" enabled="true">
              <stringProp name="XPathExtractor.default">null</stringProp>
              <stringProp name="XPathExtractor.refname">getResponseID</stringProp>
              <stringProp name="XPathExtractor.matchNumber">-1</stringProp>
              <stringProp name="XPathExtractor.xpathQuery">/AirShoppingRS/ShoppingResponseID/ResponseID</stringProp>
              <boolProp name="XPathExtractor.validate">false</boolProp>
              <boolProp name="XPathExtractor.tolerant">false</boolProp>
              <boolProp name="XPathExtractor.namespace">false</boolProp>
            </XPathExtractor>
            <hashTree/>
            <XPathExtractor guiclass="XPathExtractorGui" testclass="XPathExtractor" testname="getFlightNumber" enabled="true">
              <stringProp name="XPathExtractor.default">null</stringProp>
              <stringProp name="XPathExtractor.refname">getFlightNumber</stringProp>
              <stringProp name="XPathExtractor.matchNumber">-1</stringProp>
              <stringProp name="XPathExtractor.xpathQuery">/AirShoppingRS/DataLists/FlightSegmentList/FlightSegment[1]/OperatingCarrier/FlightNumber</stringProp>
              <boolProp name="XPathExtractor.validate">false</boolProp>
              <boolProp name="XPathExtractor.tolerant">false</boolProp>
              <boolProp name="XPathExtractor.namespace">false</boolProp>
            </XPathExtractor>
            <hashTree/>
            <XPathExtractor guiclass="XPathExtractorGui" testclass="XPathExtractor" testname="getAircraftCode" enabled="true">
              <stringProp name="XPathExtractor.default">null</stringProp>
              <stringProp name="XPathExtractor.refname">getAircraftCode</stringProp>
              <stringProp name="XPathExtractor.matchNumber">-1</stringProp>
              <stringProp name="XPathExtractor.xpathQuery">/AirShoppingRS/DataLists/FlightSegmentList/FlightSegment[1]/Equipment/AircraftCode</stringProp>
              <boolProp name="XPathExtractor.validate">false</boolProp>
              <boolProp name="XPathExtractor.tolerant">false</boolProp>
              <boolProp name="XPathExtractor.namespace">false</boolProp>
            </XPathExtractor>
            <hashTree/>
            <XPathExtractor guiclass="XPathExtractorGui" testclass="XPathExtractor" testname="getClassOfService" enabled="true">
              <stringProp name="XPathExtractor.default">null</stringProp>
              <stringProp name="XPathExtractor.refname">getClassOfService</stringProp>
              <stringProp name="XPathExtractor.matchNumber">-1</stringProp>
              <stringProp name="XPathExtractor.xpathQuery">/AirShoppingRS/DataLists/FlightSegmentList/FlightSegment[1]/ClassOfService/Code</stringProp>
              <boolProp name="XPathExtractor.validate">false</boolProp>
              <boolProp name="XPathExtractor.tolerant">false</boolProp>
              <boolProp name="XPathExtractor.namespace">false</boolProp>
            </XPathExtractor>
            <hashTree/>
            <XPathExtractor guiclass="XPathExtractorGui" testclass="XPathExtractor" testname="getPriceGuaranteeTimeLimit" enabled="true">
              <stringProp name="XPathExtractor.default">null</stringProp>
              <stringProp name="XPathExtractor.refname">getPriceGuaranteeTimeLimit</stringProp>
              <stringProp name="XPathExtractor.matchNumber">-1</stringProp>
              <stringProp name="XPathExtractor.xpathQuery">/AirShoppingRS/OffersGroup/AirlineOffers/AirlineOffer/TimeLimits/OtherLimits/OtherLimit/PriceGuaranteeTimeLimit/@Timestamp</stringProp>
              <boolProp name="XPathExtractor.validate">false</boolProp>
              <boolProp name="XPathExtractor.tolerant">false</boolProp>
              <boolProp name="XPathExtractor.namespace">false</boolProp>
            </XPathExtractor>
            <hashTree/>
            <XPathExtractor guiclass="XPathExtractorGui" testclass="XPathExtractor" testname="getTicketBy" enabled="true">
              <stringProp name="XPathExtractor.default">null</stringProp>
              <stringProp name="XPathExtractor.refname">getTicketBy</stringProp>
              <stringProp name="XPathExtractor.matchNumber">-1</stringProp>
              <stringProp name="XPathExtractor.xpathQuery">/AirShoppingRS/OffersGroup/AirlineOffers/AirlineOffer/TimeLimits/OtherLimits/OtherLimit/TicketByTimeLimit/TicketBy</stringProp>
              <boolProp name="XPathExtractor.validate">false</boolProp>
              <boolProp name="XPathExtractor.tolerant">false</boolProp>
              <boolProp name="XPathExtractor.namespace">false</boolProp>
            </XPathExtractor>
            <hashTree/>
            <XPathExtractor guiclass="XPathExtractorGui" testclass="XPathExtractor" testname="getDepartureDateSEG1" enabled="true">
              <stringProp name="XPathExtractor.default">null</stringProp>
              <stringProp name="XPathExtractor.refname">getDepartureDateSEG1</stringProp>
              <stringProp name="XPathExtractor.matchNumber">-1</stringProp>
              <stringProp name="XPathExtractor.xpathQuery">/AirShoppingRS/DataLists/FlightSegmentList/FlightSegment[@SegmentKey=&apos;SEG1&apos;]/Departure/Date</stringProp>
              <boolProp name="XPathExtractor.validate">false</boolProp>
              <boolProp name="XPathExtractor.tolerant">false</boolProp>
              <boolProp name="XPathExtractor.namespace">false</boolProp>
            </XPathExtractor>
            <hashTree/>
            <XPathExtractor guiclass="XPathExtractorGui" testclass="XPathExtractor" testname="getDepartureTimeSEG1" enabled="true">
              <stringProp name="XPathExtractor.default">null</stringProp>
              <stringProp name="XPathExtractor.refname">getDepartureTimeSEG1</stringProp>
              <stringProp name="XPathExtractor.matchNumber">-1</stringProp>
              <stringProp name="XPathExtractor.xpathQuery">/AirShoppingRS/DataLists/FlightSegmentList/FlightSegment[@SegmentKey=&apos;SEG1&apos;]/Departure/Time</stringProp>
              <boolProp name="XPathExtractor.validate">false</boolProp>
              <boolProp name="XPathExtractor.tolerant">false</boolProp>
              <boolProp name="XPathExtractor.namespace">false</boolProp>
            </XPathExtractor>
            <hashTree/>
            <XPathExtractor guiclass="XPathExtractorGui" testclass="XPathExtractor" testname="getArrivalDateSEG1" enabled="true">
              <stringProp name="XPathExtractor.default">null</stringProp>
              <stringProp name="XPathExtractor.refname">getArrivalDateSEG1</stringProp>
              <stringProp name="XPathExtractor.matchNumber">-1</stringProp>
              <stringProp name="XPathExtractor.xpathQuery">/AirShoppingRS/DataLists/FlightSegmentList/FlightSegment[@SegmentKey=&apos;SEG1&apos;]/Arrival/Date</stringProp>
              <boolProp name="XPathExtractor.validate">false</boolProp>
              <boolProp name="XPathExtractor.tolerant">false</boolProp>
              <boolProp name="XPathExtractor.namespace">false</boolProp>
            </XPathExtractor>
            <hashTree/>
            <XPathExtractor guiclass="XPathExtractorGui" testclass="XPathExtractor" testname="getBaseAmountSEG1ADT1" enabled="true">
              <stringProp name="XPathExtractor.default">0</stringProp>
              <stringProp name="XPathExtractor.refname">getBaseAmountSEG1ADT1</stringProp>
              <stringProp name="XPathExtractor.matchNumber">-1</stringProp>
              <stringProp name="XPathExtractor.xpathQuery">/AirShoppingRS/OffersGroup/AirlineOffers/AirlineOffer[1]/PricedOffer/OfferPrice[1]/FareDetail/FareComponent[1]/PriceBreakdown/Price/BaseAmount</stringProp>
              <boolProp name="XPathExtractor.validate">false</boolProp>
              <boolProp name="XPathExtractor.tolerant">false</boolProp>
              <boolProp name="XPathExtractor.namespace">false</boolProp>
            </XPathExtractor>
            <hashTree/>
            <XPathExtractor guiclass="XPathExtractorGui" testclass="XPathExtractor" testname="getRemarksSEG1ADT1" enabled="true">
              <stringProp name="XPathExtractor.default">null</stringProp>
              <stringProp name="XPathExtractor.refname">getRemarksSEG1ADT1</stringProp>
              <stringProp name="XPathExtractor.matchNumber">-1</stringProp>
              <stringProp name="XPathExtractor.xpathQuery">/AirShoppingRS/OffersGroup/AirlineOffers/AirlineOffer[1]/PricedOffer/OfferPrice[1]/FareDetail/Remarks/Remark</stringProp>
              <boolProp name="XPathExtractor.validate">false</boolProp>
              <boolProp name="XPathExtractor.tolerant">false</boolProp>
              <boolProp name="XPathExtractor.namespace">false</boolProp>
            </XPathExtractor>
            <hashTree/>
            <XPathExtractor guiclass="XPathExtractorGui" testclass="XPathExtractor" testname="getFareBasisCodeSEG1ADT1" enabled="true">
              <stringProp name="XPathExtractor.default">0</stringProp>
              <stringProp name="XPathExtractor.refname">getFareBasisCodeSEG1ADT1</stringProp>
              <stringProp name="XPathExtractor.matchNumber">-1</stringProp>
              <stringProp name="XPathExtractor.xpathQuery">/AirShoppingRS/OffersGroup/AirlineOffers/AirlineOffer[1]/PricedOffer/OfferPrice[1]/FareDetail/FareComponent[1]/FareBasis/FareBasisCode/Code</stringProp>
              <boolProp name="XPathExtractor.validate">false</boolProp>
              <boolProp name="XPathExtractor.tolerant">false</boolProp>
              <boolProp name="XPathExtractor.namespace">false</boolProp>
            </XPathExtractor>
            <hashTree/>
            <XPathExtractor guiclass="XPathExtractorGui" testclass="XPathExtractor" testname="getTaxAmountSEG1ADT1" enabled="true">
              <stringProp name="XPathExtractor.default">0</stringProp>
              <stringProp name="XPathExtractor.refname">getTaxAmountSEG1ADT1</stringProp>
              <stringProp name="XPathExtractor.matchNumber">-1</stringProp>
              <stringProp name="XPathExtractor.xpathQuery">/AirShoppingRS/OffersGroup/AirlineOffers/AirlineOffer[1]/PricedOffer/OfferPrice[1]/FareDetail/FareComponent[1]/PriceBreakdown/Price/Taxes/Total</stringProp>
              <boolProp name="XPathExtractor.validate">false</boolProp>
              <boolProp name="XPathExtractor.tolerant">false</boolProp>
              <boolProp name="XPathExtractor.namespace">false</boolProp>
            </XPathExtractor>
            <hashTree/>
            <XPathExtractor guiclass="XPathExtractorGui" testclass="XPathExtractor" testname="getPayment" enabled="true">
              <stringProp name="XPathExtractor.default">0</stringProp>
              <stringProp name="XPathExtractor.refname">getPayment</stringProp>
              <stringProp name="XPathExtractor.matchNumber">-1</stringProp>
              <stringProp name="XPathExtractor.xpathQuery">sum(/AirShoppingRS/OffersGroup/AirlineOffers/AirlineOffer[1]/PricedOffer/OfferPrice[.]/FareDetail/FareComponent[.]/PriceBreakdown/Price/Taxes/Total | /AirShoppingRS/OffersGroup/AirlineOffers/AirlineOffer[1]/PricedOffer/OfferPrice[.]/FareDetail/FareComponent[.]/PriceBreakdown/Price/BaseAmount) + 25* (${adt_number} + ${chd_number}) </stringProp>
              <boolProp name="XPathExtractor.validate">false</boolProp>
              <boolProp name="XPathExtractor.tolerant">false</boolProp>
              <boolProp name="XPathExtractor.namespace">false</boolProp>
              <stringProp name="TestPlan.comments">${__doubleSum(${getBaseAmountSEG1ADT1}, ${getTaxAmountSEG1ADT1})}</stringProp>
            </XPathExtractor>
            <hashTree/>
          </hashTree>
          <TestAction guiclass="TestActionGui" testclass="TestAction" testname="Delay" enabled="true">
            <intProp name="ActionProcessor.action">1</intProp>
            <intProp name="ActionProcessor.target">0</intProp>
            <stringProp name="ActionProcessor.duration">3000 * ${delayForThreads}</stringProp>
          </TestAction>
          <hashTree/>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="OrderCreateRQ One Way 1 ADT" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot; standalone=&quot;yes&quot;?&gt;&#xd;
&lt;edis:OrderCreateRQ EchoToken=&quot;${cntr}-${origin}-${destination}-${adt_number}ADT-${chd_number}CHD-${numberOfONDs}OND&quot; TimeStamp=&quot;2016-03-31T00:00:00.000+03:00&quot; Version=&quot;IATA2016.2&quot; xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot; &#xd;
xmlns=&quot;http://www.iata.org/IATA/EDIST&quot; xmlns:edis=&quot;http://www.iata.org/IATA/EDIST&quot;&gt;&#xd;
	&lt;PointOfSale&gt;&#xd;
		&lt;Location&gt;&#xd;
			&lt;CountryCode&gt;US&lt;/CountryCode&gt;&#xd;
			&lt;CityCode&gt;MSP&lt;/CityCode&gt;&#xd;
		&lt;/Location&gt;&#xd;
		&lt;RequestTime Zone=&quot;EST&quot;&gt;2017-05-24T07:45:00+07:45&lt;/RequestTime&gt;&#xd;
		&lt;TouchPoint&gt;&#xd;
			&lt;Device&gt;&#xd;
				&lt;Code&gt;2&lt;/Code&gt;&#xd;
				&lt;Definition&gt;Web Browser&lt;/Definition&gt;&#xd;
				&lt;Position&gt;&#xd;
					&lt;Latitude&gt;38.89756&lt;/Latitude&gt;&#xd;
					&lt;Longitude&gt;-77.03650&lt;/Longitude&gt;&#xd;
					&lt;NAC&gt;8KD7V PGGM0&lt;/NAC&gt;&#xd;
				&lt;/Position&gt;&#xd;
			&lt;/Device&gt;&#xd;
			&lt;Event&gt;&#xd;
				&lt;Code&gt;1&lt;/Code&gt;&#xd;
				&lt;Definition&gt;Order or buy&lt;/Definition&gt;&#xd;
			&lt;/Event&gt;&#xd;
		&lt;/TouchPoint&gt;&#xd;
	&lt;/PointOfSale&gt;&#xd;
	&lt;Document&gt;&#xd;
		&lt;Name&gt;JRT UNISYS GATEWAY&lt;/Name&gt;&#xd;
		&lt;ReferenceVersion&gt;1.0&lt;/ReferenceVersion&gt;&#xd;
	&lt;/Document&gt;&#xd;
	&lt;Party&gt;&#xd;
		&lt;Sender&gt;&#xd;
			&lt;TravelAgencySender&gt;&#xd;
				&lt;Contacts&gt;&#xd;
					&lt;Contact&gt;&#xd;
						&lt;EmailContact&gt;&#xd;
							&lt;Address&gt;ndc@unisys.com&lt;/Address&gt;&#xd;
						&lt;/EmailContact&gt;&#xd;
					&lt;/Contact&gt;&#xd;
				&lt;/Contacts&gt;&#xd;
				&lt;PseudoCity&gt;A4A&lt;/PseudoCity&gt;&#xd;
				&lt;IATA_Number&gt;98417900&lt;/IATA_Number&gt;&#xd;
				&lt;AgencyID Owner=&quot;NW&quot;&gt;NW&lt;/AgencyID&gt;&#xd;
				&lt;AgentUser&gt;&#xd;
					&lt;Name&gt;ksmith&lt;/Name&gt;&#xd;
					&lt;AgentUserID&gt;ksmith212&lt;/AgentUserID&gt;&#xd;
					&lt;UserRole&gt;Admin&lt;/UserRole&gt;&#xd;
				&lt;/AgentUser&gt;&#xd;
			&lt;/TravelAgencySender&gt;&#xd;
		&lt;/Sender&gt;&#xd;
	&lt;/Party&gt;&#xd;
	&lt;Query&gt;&#xd;
		&lt;Passengers&gt;&#xd;
			&lt;Passenger ObjectKey=&quot;ADT1&quot;&gt;&#xd;
				&lt;PTC Quantity=&quot;1&quot;&gt;ADT&lt;/PTC&gt;&#xd;
				&lt;Age&gt;&#xd;
					&lt;BirthDate&gt;1980-03-06&lt;/BirthDate&gt;&#xd;
				&lt;/Age&gt;&#xd;
				&lt;Name&gt;&#xd;
					&lt;Surname&gt;Jaffa&lt;/Surname&gt;&#xd;
					&lt;Given&gt;Eric&lt;/Given&gt;&#xd;
					&lt;Middle&gt;Edward&lt;/Middle&gt;&#xd;
				&lt;/Name&gt;&#xd;
				&lt;Contacts&gt;&#xd;
					&lt;Contact&gt;&#xd;
						&lt;EmailContact&gt;&#xd;
							&lt;Address&gt;jaffa@unisys.com&lt;/Address&gt;&#xd;
						&lt;/EmailContact&gt;&#xd;
					&lt;/Contact&gt;&#xd;
				&lt;/Contacts&gt;&#xd;
				&lt;Gender&gt;Male&lt;/Gender&gt;&#xd;
			&lt;/Passenger&gt;&#xd;
		&lt;/Passengers&gt;&#xd;
		&lt;OrderItems&gt;&#xd;
			&lt;ShoppingResponse&gt;&#xd;
				&lt;Owner&gt;NW&lt;/Owner&gt;&#xd;
				&lt;ResponseID&gt;${getResponseID}&lt;/ResponseID&gt;&#xd;
				&lt;Offers&gt;&#xd;
					&lt;Offer&gt;&#xd;
						&lt;OfferID Owner=&quot;NW&quot;&gt;SOL1#OD1&lt;/OfferID&gt;&#xd;
						&lt;OfferItems&gt;&#xd;
							&lt;OfferItem&gt;&#xd;
								&lt;OfferItemID Owner=&quot;NW&quot;&gt;SOL1#OD1#ADT1&lt;/OfferItemID&gt;&#xd;
								&lt;Passengers&gt;&#xd;
									&lt;PassengerReference&gt;ADT1&lt;/PassengerReference&gt;&#xd;
								&lt;/Passengers&gt;&#xd;
								&lt;ApplicableFlight&gt;&#xd;
									&lt;OriginDestinationReferences&gt;OD1&lt;/OriginDestinationReferences&gt;&#xd;
								&lt;/ApplicableFlight&gt;&#xd;
								&lt;AssociatedServices&gt;&#xd;
									&lt;AssociatedService refs=&quot;SV9&quot;&gt;&#xd;
										&lt;ServiceID Owner=&quot;NW&quot;&gt;SV9&lt;/ServiceID&gt;&#xd;
									&lt;/AssociatedService&gt;&#xd;
									&lt;AssociatedService refs=&quot;SV2&quot;&gt;&#xd;
										&lt;ServiceID Owner=&quot;NW&quot;&gt;SV2&lt;/ServiceID&gt;&#xd;
									&lt;/AssociatedService&gt;&#xd;
								&lt;/AssociatedServices&gt;&#xd;
							&lt;/OfferItem&gt;&#xd;
						&lt;/OfferItems&gt;&#xd;
					&lt;/Offer&gt;&#xd;
				&lt;/Offers&gt;&#xd;
			&lt;/ShoppingResponse&gt;&#xd;
			&lt;OfferItem&gt;&#xd;
				&lt;OfferItemID Owner=&quot;NW&quot;&gt;SOL1#OD1#ADT1&lt;/OfferItemID&gt;&#xd;
				&lt;OfferItemType&gt;&#xd;
					&lt;DetailedFlightItem&gt;&#xd;
						&lt;OriginDestination&gt;&#xd;
							&lt;Flight&gt;&#xd;
								&lt;Departure&gt;&#xd;
									&lt;AirportCode&gt;${origin}&lt;/AirportCode&gt;&#xd;
									&lt;Date&gt;${getDepartureDateSEG1}&lt;/Date&gt;&#xd;
									&lt;Time&gt;${getDepartureTimeSEG1}&lt;/Time&gt;&#xd;
								&lt;/Departure&gt;&#xd;
								&lt;Arrival&gt;&#xd;
									&lt;AirportCode&gt;${destination}&lt;/AirportCode&gt;&#xd;
									&lt;Date&gt;${getArrivalDateSEG1}&lt;/Date&gt;&#xd;
								&lt;/Arrival&gt;&#xd;
								&lt;MarketingCarrier&gt;&#xd;
									&lt;AirlineID&gt;NW&lt;/AirlineID&gt;&#xd;
									&lt;FlightNumber&gt;${getFlightNumber}&lt;/FlightNumber&gt;&#xd;
								&lt;/MarketingCarrier&gt;&#xd;
								&lt;OperatingCarrier&gt;&#xd;
									&lt;AirlineID&gt;NW&lt;/AirlineID&gt;&#xd;
									&lt;FlightNumber&gt;${getFlightNumber}&lt;/FlightNumber&gt;&#xd;
								&lt;/OperatingCarrier&gt;&#xd;
							&lt;/Flight&gt;&#xd;
						&lt;/OriginDestination&gt;&#xd;
						&lt;FareDetail&gt;&#xd;
							&lt;FareComponent&gt;&#xd;
								&lt;SegmentReference&gt;SEG1&lt;/SegmentReference&gt;&#xd;
								&lt;PriceBreakdown&gt;&#xd;
									&lt;Price&gt;&#xd;
										&lt;BaseAmount Code=&quot;USD&quot;&gt;${getBaseAmountSEG1ADT1}&lt;/BaseAmount&gt;&#xd;
										&lt;Taxes&gt;&#xd;
											&lt;Total Code=&quot;USD&quot;&gt;${getTaxAmountSEG1ADT1}&lt;/Total&gt;&#xd;
										&lt;/Taxes&gt;&#xd;
									&lt;/Price&gt;&#xd;
								&lt;/PriceBreakdown&gt;&#xd;
								&lt;FareBasis&gt;&#xd;
									&lt;FareBasisCode&gt;&#xd;
										&lt;Code&gt;${getFareBasisCodeSEG1ADT1}&lt;/Code&gt;&#xd;
									&lt;/FareBasisCode&gt;&#xd;
									&lt;RBD&gt;Y&lt;/RBD&gt;&#xd;
								&lt;/FareBasis&gt;&#xd;
								&lt;FareRules&gt;&#xd;
									&lt;Remarks&gt;&#xd;
										&lt;Remark&gt;${getRemarksSEG1ADT1}&lt;/Remark&gt;&#xd;
									&lt;/Remarks&gt;&#xd;
								&lt;/FareRules&gt;&#xd;
							&lt;/FareComponent&gt;&#xd;
						&lt;/FareDetail&gt;&#xd;
					&lt;/DetailedFlightItem&gt;&#xd;
				&lt;/OfferItemType&gt;&#xd;
				&lt;TimeLimits&gt;&#xd;
					&lt;TimeLimit&gt;&#xd;
						&lt;PriceGuaranteeTimeLimit Timestamp=&quot;${getPriceGuaranteeTimeLimit}&quot;/&gt;&#xd;
						&lt;TicketByTimeLimit&gt;&#xd;
							&lt;TicketBy&gt;${getTicketBy}&lt;/TicketBy&gt;&#xd;
						&lt;/TicketByTimeLimit&gt;&#xd;
					&lt;/TimeLimit&gt;&#xd;
				&lt;/TimeLimits&gt;&#xd;
			&lt;/OfferItem&gt;&#xd;
		&lt;/OrderItems&gt;&#xd;
		&lt;Payments&gt;&#xd;
			&lt;Payment&gt;&#xd;
				&lt;Method&gt;&#xd;
					&lt;PaymentCard&gt;&#xd;
						&lt;CardType&gt;Visa&lt;/CardType&gt;&#xd;
						&lt;CardCode&gt;VI&lt;/CardCode&gt;&#xd;
						&lt;CardNumber&gt;4111111111111111&lt;/CardNumber&gt;&#xd;
						&lt;SeriesCode&gt;584&lt;/SeriesCode&gt;&#xd;
						&lt;EffectiveExpireDate&gt;&#xd;
							&lt;Expiration&gt;1217&lt;/Expiration&gt;&#xd;
						&lt;/EffectiveExpireDate&gt;&#xd;
					&lt;/PaymentCard&gt;&#xd;
				&lt;/Method&gt;&#xd;
				&lt;Amount Code=&quot;USD&quot; Taxable=&quot;true&quot;&gt;${getPayment}&lt;/Amount&gt;&#xd;
				&lt;Payer&gt;&#xd;
					&lt;Name&gt;&#xd;
						&lt;Surname&gt;Kumar&lt;/Surname&gt;&#xd;
						&lt;Given&gt;Mithalesh&lt;/Given&gt;&#xd;
					&lt;/Name&gt;&#xd;
					&lt;Contacts&gt;&#xd;
						&lt;Contact&gt;&#xd;
							&lt;AddressContact&gt;&#xd;
								&lt;Street&gt;22 Main Street&lt;/Street&gt;&#xd;
								&lt;CityName&gt;FRA&lt;/CityName&gt;&#xd;
								&lt;PostalCode&gt;14201&lt;/PostalCode&gt;&#xd;
								&lt;CountryCode&gt;DE&lt;/CountryCode&gt;&#xd;
							&lt;/AddressContact&gt;&#xd;
							&lt;EmailContact&gt;&#xd;
								&lt;Address&gt;ramesh@unisys.com&lt;/Address&gt;&#xd;
							&lt;/EmailContact&gt;&#xd;
						&lt;/Contact&gt;&#xd;
					&lt;/Contacts&gt;&#xd;
				&lt;/Payer&gt;&#xd;
			&lt;/Payment&gt;&#xd;
		&lt;/Payments&gt;&#xd;
		&lt;DataLists&gt;&#xd;
			&lt;edis:CarryOnAllowanceList&gt;&#xd;
				&lt;edis:CarryOnAllowance ListKey=&quot;AW1&quot;&gt;&#xd;
					&lt;edis:DimensionAllowance&gt;&#xd;
						&lt;edis:DimensionUOM&gt;Inch&lt;/edis:DimensionUOM&gt;&#xd;
						&lt;edis:Dimensions&gt;&#xd;
							&lt;edis:Category&gt;L&lt;/edis:Category&gt;&#xd;
							&lt;edis:MaxValue&gt;30&lt;/edis:MaxValue&gt;&#xd;
						&lt;/edis:Dimensions&gt;&#xd;
						&lt;edis:Dimensions&gt;&#xd;
							&lt;edis:Category&gt;W&lt;/edis:Category&gt;&#xd;
							&lt;edis:MaxValue&gt;30&lt;/edis:MaxValue&gt;&#xd;
						&lt;/edis:Dimensions&gt;&#xd;
						&lt;edis:Dimensions&gt;&#xd;
							&lt;edis:Category&gt;H&lt;/edis:Category&gt;&#xd;
							&lt;edis:MaxValue&gt;30&lt;/edis:MaxValue&gt;&#xd;
						&lt;/edis:Dimensions&gt;&#xd;
					&lt;/edis:DimensionAllowance&gt;&#xd;
					&lt;edis:WeightAllowance&gt;&#xd;
						&lt;edis:MaximumWeight&gt;&#xd;
							&lt;edis:Value&gt;5&lt;/edis:Value&gt;&#xd;
							&lt;edis:UOM&gt;Kilogram&lt;/edis:UOM&gt;&#xd;
						&lt;/edis:MaximumWeight&gt;&#xd;
					&lt;/edis:WeightAllowance&gt;&#xd;
				&lt;/edis:CarryOnAllowance&gt;&#xd;
			&lt;/edis:CarryOnAllowanceList&gt;&#xd;
			&lt;edis:CheckedBagAllowanceList&gt;&#xd;
				&lt;edis:CheckedBagAllowance ListKey=&quot;AW2&quot;&gt;&#xd;
					&lt;edis:DimensionAllowance&gt;&#xd;
						&lt;edis:DimensionUOM&gt;Inch&lt;/edis:DimensionUOM&gt;&#xd;
						&lt;edis:Dimensions&gt;&#xd;
							&lt;edis:Category&gt;L&lt;/edis:Category&gt;&#xd;
							&lt;edis:MaxValue&gt;15&lt;/edis:MaxValue&gt;&#xd;
						&lt;/edis:Dimensions&gt;&#xd;
						&lt;edis:Dimensions&gt;&#xd;
							&lt;edis:Category&gt;W&lt;/edis:Category&gt;&#xd;
							&lt;edis:MaxValue&gt;16&lt;/edis:MaxValue&gt;&#xd;
						&lt;/edis:Dimensions&gt;&#xd;
						&lt;edis:Dimensions&gt;&#xd;
							&lt;edis:Category&gt;H&lt;/edis:Category&gt;&#xd;
							&lt;edis:MaxValue&gt;17&lt;/edis:MaxValue&gt;&#xd;
						&lt;/edis:Dimensions&gt;&#xd;
					&lt;/edis:DimensionAllowance&gt;&#xd;
					&lt;edis:WeightAllowance&gt;&#xd;
						&lt;edis:MaximumWeight&gt;&#xd;
							&lt;edis:Value&gt;10&lt;/edis:Value&gt;&#xd;
							&lt;edis:UOM&gt;Kilogram&lt;/edis:UOM&gt;&#xd;
						&lt;/edis:MaximumWeight&gt;&#xd;
					&lt;/edis:WeightAllowance&gt;&#xd;
				&lt;/edis:CheckedBagAllowance&gt;&#xd;
			&lt;/edis:CheckedBagAllowanceList&gt;&#xd;
			&lt;FlightSegmentList&gt;&#xd;
				&lt;FlightSegment SegmentKey=&quot;SEG1&quot;&gt;&#xd;
					&lt;Departure&gt;&#xd;
						&lt;AirportCode&gt;${origin}&lt;/AirportCode&gt;&#xd;
						&lt;Date&gt;${getDepartureDateSEG1}&lt;/Date&gt;&#xd;
						&lt;Time&gt;${getDepartureTimeSEG1}&lt;/Time&gt;&#xd;
					&lt;/Departure&gt;&#xd;
					&lt;Arrival&gt;&#xd;
						&lt;AirportCode&gt;${destination}&lt;/AirportCode&gt;&#xd;
						&lt;Date&gt;${getArrivalDateSEG1}&lt;/Date&gt;&#xd;
					&lt;/Arrival&gt;&#xd;
					&lt;MarketingCarrier&gt;&#xd;
						&lt;AirlineID&gt;NW&lt;/AirlineID&gt;&#xd;
						&lt;FlightNumber&gt;${getFlightNumber}&lt;/FlightNumber&gt;&#xd;
					&lt;/MarketingCarrier&gt;&#xd;
					&lt;OperatingCarrier&gt;&#xd;
						&lt;AirlineID&gt;NW&lt;/AirlineID&gt;&#xd;
						&lt;FlightNumber&gt;${getFlightNumber}&lt;/FlightNumber&gt;&#xd;
					&lt;/OperatingCarrier&gt;&#xd;
					&lt;Equipment&gt;&#xd;
						&lt;AircraftCode&gt;${getAircraftCode}&lt;/AircraftCode&gt;&#xd;
					&lt;/Equipment&gt;&#xd;
					&lt;ClassOfService&gt;&#xd;
						&lt;Code&gt;${getClassOfService}&lt;/Code&gt;&#xd;
						&lt;MarketingName&gt;Economy&lt;/MarketingName&gt;&#xd;
					&lt;/ClassOfService&gt;&#xd;
					&lt;FlightDetail&gt;&#xd;
						&lt;FlightDuration&gt;&#xd;
							&lt;Value&gt;PT5H0M&lt;/Value&gt;&#xd;
						&lt;/FlightDuration&gt;&#xd;
					&lt;/FlightDetail&gt;&#xd;
				&lt;/FlightSegment&gt;&#xd;
			&lt;/FlightSegmentList&gt;&#xd;
			&lt;FlightList&gt;&#xd;
				&lt;Flight FlightKey=&quot;FL1&quot;&gt;&#xd;
					&lt;Journey&gt;&#xd;
						&lt;Time&gt;PT16H10M&lt;/Time&gt;&#xd;
					&lt;/Journey&gt;&#xd;
					&lt;SegmentReferences&gt;SEG1&lt;/SegmentReferences&gt;&#xd;
				&lt;/Flight&gt;&#xd;
			&lt;/FlightList&gt;&#xd;
			&lt;OriginDestinationList&gt;&#xd;
				&lt;OriginDestination OriginDestinationKey=&quot;OD1&quot;&gt;&#xd;
					&lt;DepartureCode&gt;${origin}&lt;/DepartureCode&gt;&#xd;
					&lt;ArrivalCode&gt;${destination}&lt;/ArrivalCode&gt;&#xd;
					&lt;FlightReferences&gt;FL1&lt;/FlightReferences&gt;&#xd;
				&lt;/OriginDestination&gt;&#xd;
			&lt;/OriginDestinationList&gt;&#xd;
			&lt;ServiceList&gt;&#xd;
				&lt;Service ObjectKey=&quot;SV2&quot;&gt;&#xd;
					&lt;ServiceID Owner=&quot;NW&quot;&gt;50&lt;/ServiceID&gt;&#xd;
					&lt;Name&gt;Veg Meal&lt;/Name&gt;&#xd;
					&lt;Encoding&gt;&#xd;
						&lt;RFIC&gt;&#xd;
							&lt;Code&gt;G&lt;/Code&gt;&#xd;
						&lt;/RFIC&gt;&#xd;
						&lt;SubCode&gt;0AP&lt;/SubCode&gt;&#xd;
					&lt;/Encoding&gt;&#xd;
					&lt;Descriptions&gt;&#xd;
						&lt;Description&gt;&#xd;
							&lt;Text&gt;Veg Meal&lt;/Text&gt;&#xd;
						&lt;/Description&gt;&#xd;
					&lt;/Descriptions&gt;&#xd;
					&lt;Price&gt;&#xd;
						&lt;Total Code=&quot;USD&quot;&gt;0.00&lt;/Total&gt;&#xd;
						&lt;PassengerReferences&gt;ADT1&lt;/PassengerReferences&gt;&#xd;
					&lt;/Price&gt;&#xd;
					&lt;BookingInstructions&gt;&#xd;
						&lt;SSRCode&gt;OTHS&lt;/SSRCode&gt;&#xd;
					&lt;/BookingInstructions&gt;&#xd;
					&lt;Associations&gt;&#xd;
						&lt;Flight&gt;&#xd;
							&lt;SegmentReferences&gt;SEG1&lt;/SegmentReferences&gt;&#xd;
						&lt;/Flight&gt;&#xd;
					&lt;/Associations&gt;&#xd;
				&lt;/Service&gt;&#xd;
				&lt;Service ObjectKey=&quot;SV9&quot;&gt;&#xd;
					&lt;ServiceID Owner=&quot;NW&quot;&gt;1026&lt;/ServiceID&gt;&#xd;
					&lt;Name&gt;Excess Baggage&lt;/Name&gt;&#xd;
					&lt;Encoding&gt;&#xd;
						&lt;RFIC&gt;&#xd;
							&lt;Code&gt;C&lt;/Code&gt;&#xd;
						&lt;/RFIC&gt;&#xd;
						&lt;SubCode&gt;0CC&lt;/SubCode&gt;&#xd;
					&lt;/Encoding&gt;&#xd;
					&lt;Descriptions&gt;&#xd;
						&lt;Description&gt;&#xd;
							&lt;Text&gt;EXCESS BAGGAGE&lt;/Text&gt;&#xd;
						&lt;/Description&gt;&#xd;
					&lt;/Descriptions&gt;&#xd;
					&lt;Price&gt;&#xd;
						&lt;Total Code=&quot;USD&quot;&gt;25.00&lt;/Total&gt;&#xd;
						&lt;PassengerReferences&gt;ADT1&lt;/PassengerReferences&gt;&#xd;
					&lt;/Price&gt;&#xd;
					&lt;BookingInstructions&gt;&#xd;
						&lt;SSRCode&gt;XBAG&lt;/SSRCode&gt;&#xd;
					&lt;/BookingInstructions&gt;&#xd;
					&lt;Associations&gt;&#xd;
						&lt;Flight&gt;&#xd;
							&lt;SegmentReferences&gt;SEG1&lt;/SegmentReferences&gt;&#xd;
						&lt;/Flight&gt;&#xd;
						&lt;OtherAssociations&gt;&#xd;
							&lt;OtherAssociation&gt;&#xd;
								&lt;Type&gt;CARRY&lt;/Type&gt;&#xd;
								&lt;ReferenceValue&gt;AW1&lt;/ReferenceValue&gt;&#xd;
							&lt;/OtherAssociation&gt;&#xd;
						&lt;/OtherAssociations&gt;&#xd;
					&lt;/Associations&gt;&#xd;
				&lt;/Service&gt;&#xd;
			&lt;/ServiceList&gt;&#xd;
		&lt;/DataLists&gt;&#xd;
	&lt;/Query&gt;&#xd;
&lt;/edis:OrderCreateRQ&gt;&#xd;
</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${IP}</stringProp>
            <stringProp name="HTTPSampler.port">${port}</stringProp>
            <stringProp name="HTTPSampler.protocol"></stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">/ndcgateway</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">Content-Type</stringProp>
                  <stringProp name="Header.value">application/xml</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
          </hashTree>
        </hashTree>
        <XMLSchemaAssertion guiclass="XMLSchemaAssertionGUI" testclass="XMLSchemaAssertion" testname="XML Schema Assertion" enabled="false">
          <stringProp name="xmlschema_assertion_filename">C:\schemas\NDC\16.2\AirShoppingRS.xsd</stringProp>
        </XMLSchemaAssertion>
        <hashTree/>
        <TestAction guiclass="TestActionGui" testclass="TestAction" testname="Delay" enabled="true">
          <intProp name="ActionProcessor.action">1</intProp>
          <intProp name="ActionProcessor.target">0</intProp>
          <stringProp name="ActionProcessor.duration">1000 * ${delayForThreads}</stringProp>
        </TestAction>
        <hashTree/>
      </hashTree>
      <ResultCollector guiclass="TableVisualizer" testclass="ResultCollector" testname="View Results in Table" enabled="false">
        <boolProp name="ResultCollector.error_logging">false</boolProp>
        <objProp>
          <name>saveConfig</name>
          <value class="SampleSaveConfiguration">
            <time>true</time>
            <latency>true</latency>
            <timestamp>true</timestamp>
            <success>true</success>
            <label>true</label>
            <code>true</code>
            <message>true</message>
            <threadName>true</threadName>
            <dataType>true</dataType>
            <encoding>false</encoding>
            <assertions>true</assertions>
            <subresults>true</subresults>
            <responseData>false</responseData>
            <samplerData>false</samplerData>
            <xml>false</xml>
            <fieldNames>false</fieldNames>
            <responseHeaders>false</responseHeaders>
            <requestHeaders>false</requestHeaders>
            <responseDataOnError>false</responseDataOnError>
            <saveAssertionResultsFailureMessage>false</saveAssertionResultsFailureMessage>
            <assertionsResultsToSave>0</assertionsResultsToSave>
            <bytes>true</bytes>
            <threadCounts>true</threadCounts>
          </value>
        </objProp>
        <stringProp name="filename"></stringProp>
      </ResultCollector>
      <hashTree/>
      <ResultCollector guiclass="SummaryReport" testclass="ResultCollector" testname="Summary Report" enabled="true">
        <boolProp name="ResultCollector.error_logging">false</boolProp>
        <objProp>
          <name>saveConfig</name>
          <value class="SampleSaveConfiguration">
            <time>true</time>
            <latency>true</latency>
            <timestamp>true</timestamp>
            <success>true</success>
            <label>true</label>
            <code>true</code>
            <message>true</message>
            <threadName>true</threadName>
            <dataType>true</dataType>
            <encoding>false</encoding>
            <assertions>true</assertions>
            <subresults>true</subresults>
            <responseData>false</responseData>
            <samplerData>false</samplerData>
            <xml>false</xml>
            <fieldNames>false</fieldNames>
            <responseHeaders>false</responseHeaders>
            <requestHeaders>false</requestHeaders>
            <responseDataOnError>false</responseDataOnError>
            <saveAssertionResultsFailureMessage>false</saveAssertionResultsFailureMessage>
            <assertionsResultsToSave>0</assertionsResultsToSave>
            <bytes>true</bytes>
            <threadCounts>true</threadCounts>
            <idleTime>true</idleTime>
            <connectTime>true</connectTime>
          </value>
        </objProp>
        <stringProp name="filename"></stringProp>
      </ResultCollector>
      <hashTree/>
      <ResultCollector guiclass="ViewResultsFullVisualizer" testclass="ResultCollector" testname="View Results Tree" enabled="true">
        <boolProp name="ResultCollector.error_logging">false</boolProp>
        <objProp>
          <name>saveConfig</name>
          <value class="SampleSaveConfiguration">
            <time>false</time>
            <latency>false</latency>
            <timestamp>true</timestamp>
            <success>false</success>
            <label>false</label>
            <code>false</code>
            <message>false</message>
            <threadName>false</threadName>
            <dataType>false</dataType>
            <encoding>false</encoding>
            <assertions>false</assertions>
            <subresults>false</subresults>
            <responseData>false</responseData>
            <samplerData>true</samplerData>
            <xml>true</xml>
            <fieldNames>false</fieldNames>
            <responseHeaders>false</responseHeaders>
            <requestHeaders>false</requestHeaders>
            <responseDataOnError>false</responseDataOnError>
            <saveAssertionResultsFailureMessage>false</saveAssertionResultsFailureMessage>
            <assertionsResultsToSave>0</assertionsResultsToSave>
          </value>
        </objProp>
        <stringProp name="filename"></stringProp>
      </ResultCollector>
      <hashTree/>
      <ResultCollector guiclass="ObsoleteGui" testclass="ResultCollector" testname="Monitor Results" enabled="false">
        <boolProp name="ResultCollector.error_logging">false</boolProp>
        <objProp>
          <name>saveConfig</name>
          <value class="SampleSaveConfiguration">
            <time>true</time>
            <latency>true</latency>
            <timestamp>true</timestamp>
            <success>true</success>
            <label>true</label>
            <code>true</code>
            <message>true</message>
            <threadName>true</threadName>
            <dataType>true</dataType>
            <encoding>false</encoding>
            <assertions>true</assertions>
            <subresults>true</subresults>
            <responseData>false</responseData>
            <samplerData>false</samplerData>
            <xml>false</xml>
            <fieldNames>true</fieldNames>
            <responseHeaders>false</responseHeaders>
            <requestHeaders>false</requestHeaders>
            <responseDataOnError>false</responseDataOnError>
            <saveAssertionResultsFailureMessage>true</saveAssertionResultsFailureMessage>
            <assertionsResultsToSave>0</assertionsResultsToSave>
            <bytes>true</bytes>
            <threadCounts>true</threadCounts>
            <idleTime>true</idleTime>
          </value>
        </objProp>
        <stringProp name="filename"></stringProp>
      </ResultCollector>
      <hashTree/>
      <ResultCollector guiclass="GraphVisualizer" testclass="ResultCollector" testname="Graph Results" enabled="false">
        <boolProp name="ResultCollector.error_logging">false</boolProp>
        <objProp>
          <name>saveConfig</name>
          <value class="SampleSaveConfiguration">
            <time>true</time>
            <latency>true</latency>
            <timestamp>true</timestamp>
            <success>true</success>
            <label>true</label>
            <code>true</code>
            <message>true</message>
            <threadName>true</threadName>
            <dataType>true</dataType>
            <encoding>false</encoding>
            <assertions>true</assertions>
            <subresults>true</subresults>
            <responseData>false</responseData>
            <samplerData>false</samplerData>
            <xml>false</xml>
            <fieldNames>true</fieldNames>
            <responseHeaders>false</responseHeaders>
            <requestHeaders>false</requestHeaders>
            <responseDataOnError>false</responseDataOnError>
            <saveAssertionResultsFailureMessage>true</saveAssertionResultsFailureMessage>
            <assertionsResultsToSave>0</assertionsResultsToSave>
            <bytes>true</bytes>
            <threadCounts>true</threadCounts>
            <idleTime>true</idleTime>
          </value>
        </objProp>
        <stringProp name="filename"></stringProp>
      </ResultCollector>
      <hashTree/>
    </hashTree>
    <WorkBench guiclass="WorkBenchGui" testclass="WorkBench" testname="WorkBench" enabled="true">
      <boolProp name="WorkBench.save">true</boolProp>
    </WorkBench>
    <hashTree/>
  </hashTree>
</jmeterTestPlan>
